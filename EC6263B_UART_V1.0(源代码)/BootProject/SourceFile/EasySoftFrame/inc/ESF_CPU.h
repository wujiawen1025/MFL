/*
========================================================================================================================
**【文件描述】                                        【文件描述】                                        【文件描述】**
========================================================================================================================
**    文件名称：ESF_CPU.h 
**
**    功能描述: 本文件包含与实际CPU平台相关的移植函数与定义
**
**    项目名称：Easy SoftWare FrameWork (简单 软件框架)
**
**    平台信息：
**
**    作    者：Hzy
**
**    版    本：V1.0
**
**    其他说明:
**
**    修改记录: --------------------------------------------------------------
**              2015.08    
**              完成 V1.0 版本
**              --------------------------------------------------------------
**              2016.06 
**              升级到V1.1版本。主要是为了简化有关事件和内存分配释放的使用。
**              1、去掉事件内存池相关内容。 
**              2、修改 ESF_Evt_t结构体，增加变量AppendData[1]; 
**              3、修改 ESF_Cfg.h文件，使得配置功能更明了简便。
**
========================================================================================================================
========================================================================================================================
*/
#ifndef ESF_CPU_H
#define ESF_CPU_H


/*
========================================================================================================================
* 【文件包含】                                         【文件包含】                                          【文件包含】
========================================================================================================================
*/
#include "ESF.h"


/*
========================================================================================================================
*【全局宏定义】                                       【全局宏定义】                                       【全局宏定义】
========================================================================================================================
*/
/*===============================================================
**           处理器位宽定义 
=================================================================*/
#ifndef ESF_CFG_CPU_BIT_WIDTH
//#define ESF_CFG_CPU_BIT_WIDTH              8     /*8位*/
//#define ESF_CFG_CPU_BIT_WIDTH              16    /*16位*/
#define  ESF_CFG_CPU_BIT_WIDTH               32    /*32位*/
#endif

#define  CPU_BIT_WIDTH     ESF_CFG_CPU_BIT_WIDTH   /*32位*/



/*
========================================================================================================================
*【全局数据类型定义】                              【全局数据类型定义】                              【全局数据类型定义】
========================================================================================================================
*/
/*
************************************************************************************************************************
* 类型定义 :  数据类型定义                                                                                  
* 注意：有的CPU平台已经做了良好的数据类型定义（如stm32等CM3内核的芯片）
*       因此这里用宏 ESF_DATETYPE_NO_DEFINED 来控制是否要自己定义。
************************************************************************************************************************
*/
//#define ESF_DATETYPE_NO_DEFINED

#ifdef  ESF_DATETYPE_NO_DEFINED

/*基础数据类型定义*/
typedef unsigned char         u8;         //  8 位无符号数
typedef unsigned char         uint8;      //  8 位无符号数
typedef unsigned char         uint8_t;    //  8 位无符号数
typedef unsigned short int    u16;        // 16 位无符号数
typedef unsigned short int    uint16;     // 16 位无符号数
typedef unsigned short int    uint16_t;   // 16 位无符号数
typedef unsigned long int     u32;        // 32 位无符号数
typedef unsigned long int     uint32;     // 32 位无符号数
typedef unsigned long int     uint32_t;   // 32 位无符号数
typedef char                  s8;         //  8 位有符号数
typedef char                  int8;       //  8 位有符号数
typedef char                  int8_t;     //  8 位有符号数
typedef short int             s16;        // 16 位有符号数 
typedef short int             int16;      // 16 位有符号数 
typedef short int             int16_t;    // 16 位有符号数 
typedef int                   s32;        // 32 位有符号数 
typedef int                   int32;      // 32 位有符号数 
typedef int                   int32_t;    // 32 位有符号数 

/*不优化的基础数据类型定义*/
typedef volatile uint8_t      vu8;        //  8 位无符号数 
typedef volatile uint8_t      vuint8;     //  8 位无符号数 
typedef volatile uint8_t      vuint8_t;   //  8 位无符号数 
typedef volatile uint16_t     vu16;       // 16 位无符号数 
typedef volatile uint16_t     vuint16;    // 16 位无符号数 
typedef volatile uint16_t     vuint16_t;  // 16 位无符号数 
typedef volatile uint32_t     vu32;       // 32 位无符号数
typedef volatile uint32_t     vuint32;    // 32 位无符号数
typedef volatile uint32_t     vuint32_t;  // 32 位无符号数
typedef volatile int8_t       vs8;        //  8 位有符号数 
typedef volatile int8_t       vint8;      //  8 位有符号数 
typedef volatile int8_t       vint8_t;    //  8 位有符号数 
typedef volatile int16_t      vs16;       // 16 位有符号数 
typedef volatile int16_t      vint16;     // 16 位有符号数 
typedef volatile int16_t      vint16_t;   // 16 位有符号数 
typedef volatile int32_t      vs32;       // 32 位有符号数 
typedef volatile int32_t      vint32;     // 32 位有符号数 
typedef volatile int32_t      vint32_t;   // 32 位有符号数 

#endif


/*
========================================================================================================================
*【对外声明】                                          【对外声明】                                          【对外声明】
========================================================================================================================
*/
#define  ESF_EnterCritical()    Critical_Enter()
#define  ESF_ExitCritical()     Critical_Exit()


#endif
