/*
========================================================================================================================
**【文件描述】                                        【文件描述】                                        【文件描述】**
========================================================================================================================
**    文件名称: ESF_Evt.h 
**
**    功能描述: 事件队列 与事件内存块  的实现
**
**    项目名称: Easy SoftWare FrameWork (简单 软件框架)
**
**    平台信息:
**
**    作    者: Hzy
**
**    版    本: V1.1
**
**    其他说明: ---------------------------------------------------------------
**              事件队列机制：
**              主动方：触发事件，将事件相关信息投递到事件队列中。
**              被动方：不断查阅事件队列，看是否有相关的事件发生。
**
**              ---------------------------------------------------------------
**              关于事件队列机制使用的建议原则：
**              系统的事件可分为：
**              （1）、需要不断执行的事件代码。如 主 While 循环里的一些代码。
**              （2）、依赖时间片，定时执行的事件代码。
**              （3）、被动（随机）发生事件代码。 如按键，串口接收控制命令等。
**
**               对于（1）：不适合使用事件队列机制来不断查询是否发生事件。
**               对于（2）：根据情况可使用，也可不使用事件队列机制。
**               对于（3）：系统不能预估该类事件发生的时刻与次数，最适合使用事件队列机制。
**
**              ---------------------------------------------------------------
**              ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
**                ★ 重要说明：请将事件类型、事件参数、事件的定义放在该文件。 ★
**                ★           根据不同的应用，该文件是经常需要修改的文件。   ★
**
**    修改记录: --------------------------------------------------------------
**              2015.08    
**              完成 V1.0 版本
**              --------------------------------------------------------------
**              2016.06 
**              升级到V1.1版本。主要是为了简化有关事件和内存分配释放的使用。
**              1、去掉事件内存池相关内容。 
**              2、修改 ESF_Evt_t结构体，增加变量AppendData[1]; 
**              3、修改 ESF_Cfg.h文件，使得配置功能更明了简便。
**
========================================================================================================================
========================================================================================================================
*/
#ifndef ESF_EVT_H
#define ESF_EVT_H


/*
========================================================================================================================
* 【文件包含】                                         【文件包含】                                          【文件包含】
========================================================================================================================
*/
#include "ESF.h"


/*
========================================================================================================================
*【全局宏定义】                                       【全局宏定义】                                       【全局宏定义】
========================================================================================================================
*/

#ifndef ESF_CFG_EVENT_QUENE_SIZE
#define  ESF_CFG_EVENT_QUENE_SIZE                2                               /*队列空间，注：最小值为2*/
#endif
#if (ESF_CFG_EVENT_QUENE_SIZE < 2)
#undef   ESF_CFG_EVENT_QUENE_SIZE
#define  ESF_CFG_EVENT_QUENE_SIZE                2                               /*队列空间，注：最小值为2*/
#endif

#define  ESF_EVENT_QUENE_SIZE                    ESF_CFG_EVENT_QUENE_SIZE        /*队列空间，注：最小值为2*/



/*
========================================================================================================================
*【全局数据类型定义】                              【全局数据类型定义】                              【全局数据类型定义】
========================================================================================================================
*/
/*
************************************************************************************************************************
* 类型定义 :  事件类型枚举定义                                                                                  
* 之所以定义成枚举，是因为枚举自动递增加1。
* 方便将事件的处理函数封装成数组形式的函数指针表，
* 然后通过数组下标来快速地索引事件。
*
* 注意：不要手动给枚举值赋值，防止数值不连续或重复。
************************************************************************************************************************
*/
typedef enum
{
  /*★ 请根据应用的需求，在这里添加相应事件的类型。★*/
  EvtCDPRx,            /*事件: 通信数据包接收*/
  EvtCDPTx,            /*事件: 通信数据包发送*/
  EvtKey,              /*事件: 按键事件*/ 


  /*--------------------------------------------------*/
  ESF_EVT_MAX          /*记录事件类型的最大数量，不得删除*/
}ESF_EvtType_t;


/*
************************************************************************************************************************
* 类型定义 :  事件参数: 按键                                                                        
************************************************************************************************************************
*/
typedef struct 
{
  uint8_t  KeyVal;  /*键值*/
}EvtArgKey_t;


/*
************************************************************************************************************************
* 类型定义 :  事件参数: 通信数据包接收                                                                     
************************************************************************************************************************
*/
typedef struct 
{
  uint8_t   DAP;               /*数据访问端口，预留*/
  uint8_t   CDPType;           /*数据包类型*/

  uint16_t  RxLen;             /*接收长度*/
  uint8_t   *pRxBuf;           /*指向接收的缓存*/

  uint16_t  AckLen;            /*数据处理后的应答长度*/
  uint8_t   *pAckBuf;          /*指向应答缓存*/
}EvtArgCDPRx_t;


/*
************************************************************************************************************************
* 类型定义 :  事件参数: 通信数据包发送                                                                       
************************************************************************************************************************
*/
typedef struct
{
  uint8_t   DAP;               /*数据访问端口，预留*/
  uint8_t   CDPType;           /*数据包类型*/

  uint16_t  TxLen;             /*发送长度*/
  uint8_t   *pTxBuf;           /*指向发送的缓存*/
  
}EvtArgCDPTx_t;


/*
************************************************************************************************************************
* 类型定义 :  事件参数: 通用的事件参数                                                                      
************************************************************************************************************************
*/
typedef struct
{
  uint8_t  Reserved; /*保留，有些事件不需要参数*/
}EvtArgCommon_t;


/*
************************************************************************************************************************
* 类型定义 :  事件定义                                                                    
************************************************************************************************************************
*/
typedef struct 
{ 
  uint8_t   Type;  /*事件类型*/
  
  union 
  {
    /*★ 请根据应用的需求，在这里添加事件参数的类型。 ★*/
    EvtArgKey_t             KeyScan;
    EvtArgCDPTx_t           CDPTx;
    EvtArgCDPRx_t           CDPRx;
    EvtArgCommon_t          Common;
  }Arg; 
  
  /*附加数据，存放大数据时使用，比如串口接收发送的数据包。
    结合内存块使用。大小定义为单片机位宽类型的数组就可以了
    (这样是为了防止指针转换引起的地址对齐问题)。
    实际操作以指针方式进行操作，方法见串口数据收发处理的相关代码。*/
  #if (CPU_BIT_WIDTH == 8)
    uint8_t   AppendData[1]; 
  #elif (CPU_BIT_WIDTH == 16)
    uint16_t   AppendData[1]; 
  #elif (CPU_BIT_WIDTH == 32)
    uint32_t   AppendData[1]; 
  #else
    uint32_t   AppendData[1]; 
  #endif
  
}ESF_Evt_t;  


/*
************************************************************************************************************************
* 类型定义 :  事件表项定义。                                                                
************************************************************************************************************************
*/
typedef struct 
{ 
  /*事件类型*/
  uint8_t   Type;                           

 /*事件对应的处理函数。
  * 返回值：MEM_IDLE -- 事件内存空闲，可以调用ESF_EvtMemPool_Free()函数释放了。
  *         MEM_USE  -- 事件内存还有用，不能释放。*/  
  uint8_t   (*pEvtFunc)(ESF_Evt_t *pEvt);  

}ESF_EvtTabItem_t;  



/*
************************************************************************************************************************
* 类型定义 :  事件队列 定义                                                                       
************************************************************************************************************************
*/
typedef struct
{
  ESF_Evt_t    *FIFO[ESF_EVENT_QUENE_SIZE];
  uint8_t      in;
  uint8_t      out;
  uint8_t      used;
}ESF_EvtQuene_t;



/*
========================================================================================================================
*【对外声明】                                          【对外声明】                                          【对外声明】
========================================================================================================================
*/
uint8_t ESF_EvtQuene_Post(ESF_Evt_t *pEvt);
ESF_Evt_t* ESF_EvtQuene_Pend(void);


#endif
