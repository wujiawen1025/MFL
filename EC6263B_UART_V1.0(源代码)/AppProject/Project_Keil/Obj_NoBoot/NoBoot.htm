<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj_NoBoot\NoBoot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj_NoBoot\NoBoot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Feb 18 08:46:49 2021
<BR><P>
<H3>Maximum Stack Usage =        140 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; System_Init &rArr; BSP_Init &rArr; BSP_UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[39]">ADC2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from bsp_adc.o(i.ADC0_1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">AppDataObjID</a> from cdp_cenapp.o(i.AppDataObjID) referenced from cdp_cenapp.o(i.CDP_AppToCen_AnalyzeApp)
 <LI><a href="#[14e]">BackSpike_ActionHandle</a> from backspike.o(i.BackSpike_ActionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[49]">BackSpike_CountIOCheck_CB</a> from backspike.o(i.BackSpike_CountIOCheck_CB) referenced from backspike.o(i.BackSpike_Init)
 <LI><a href="#[6f]">BackSpike_PauseOff</a> from backspike.o(i.BackSpike_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[5f]">BackSpike_PauseOn</a> from backspike.o(i.BackSpike_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[14c]">BackSpike_PositionHandle</a> from backspike.o(i.BackSpike_PositionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[14d]">BackSpike_PositionIOCheck</a> from backspike.o(i.BackSpike_PositionIOCheck) referenced from spike.o(.constdata)
 <LI><a href="#[73]">BodyScan_PauseOff</a> from bodyscan.o(i.BodyScan_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[63]">BodyScan_PauseOn</a> from bodyscan.o(i.BodyScan_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[51]">CDPDataObjID</a> from cdp.o(i.CDPDataObjID) referenced from cdp.o(i.CDP_DataObjRxHandle)
 <LI><a href="#[140]">CDP_AppToCen_CfgNetwork</a> from cdp_cenapp.o(i.CDP_AppToCen_CfgNetwork) referenced from cdp_cenapp.o(.constdata)
 <LI><a href="#[142]">CDP_AppToCen_GetIDCode</a> from cdp_cenapp.o(i.CDP_AppToCen_GetIDCode) referenced from cdp_cenapp.o(.constdata)
 <LI><a href="#[141]">CDP_AppToCen_HeartbeatPacket</a> from cdp_cenapp.o(i.CDP_AppToCen_HeartbeatPacket) referenced from cdp_cenapp.o(.constdata)
 <LI><a href="#[13f]">CDP_AppToCen_KeyValHandle</a> from cdp_cenapp.o(i.CDP_AppToCen_KeyValHandle) referenced from cdp_cenapp.o(.constdata)
 <LI><a href="#[4d]">CDP_CenApp_ByteRx</a> from cdp_cenapp.o(i.CDP_CenApp_ByteRx) referenced from cdp_cenapp.o(i.CDP_CenApp_Init)
 <LI><a href="#[13e]">CDP_CenApp_FaultCheck</a> from cdp_cenapp.o(i.CDP_CenApp_FaultCheck) referenced from cdp.o(.constdata)
 <LI><a href="#[4e]">CDP_CenServer_ByteRx</a> from cdp_censerver.o(i.CDP_CenServer_ByteRx) referenced from cdp_censerver.o(i.CDP_CenServer_Init)
 <LI><a href="#[13d]">CDP_CenServer_FaultCheck</a> from cdp_censerver.o(i.CDP_CenServer_FaultCheck) referenced from cdp.o(.constdata)
 <LI><a href="#[4f]">CDP_CenXxx_ByteRx</a> from cdp_cenxxx.o(i.CDP_CenXxx_ByteRx) referenced from cdp_cenxxx.o(i.CDP_CenXxx_Init)
 <LI><a href="#[13c]">CDP_CenXxx_FaultCheck</a> from cdp_cenxxx.o(i.CDP_CenXxx_FaultCheck) referenced from cdp.o(.constdata)
 <LI><a href="#[13b]">CDP_DataTxTmrHandle</a> from cdp.o(i.CDP_DataTxTmrHandle) referenced from cdp.o(.constdata)
 <LI><a href="#[83]">CDP_PDUTxHandle</a> from cdp.o(i.CDP_PDUTxHandle) referenced from system.o(.constdata)
 <LI><a href="#[4b]">Core_BackScanPauseOff</a> from core.o(i.Core_BackScanPauseOff) referenced from bodyscan.o(i.BodyScan_Handle)
 <LI><a href="#[4a]">Core_BackScanPauseOn</a> from core.o(i.Core_BackScanPauseOn) referenced from bodyscan.o(i.BodyScan_Handle)
 <LI><a href="#[129]">Core_CDPDataObjRx_0x40</a> from core.o(i.Core_CDPDataObjRx_0x40) referenced from cdp.o(.constdata)
 <LI><a href="#[53]">Core_GetTCSActionID</a> from core.o(i.Core_GetTCSActionID) referenced from core.o(i.Core_TCSActionHandle)
 <LI><a href="#[52]">Core_GetXYZActionID</a> from core.o(i.Core_GetXYZActionID) referenced from core.o(i.Core_GetXYZMannualManageAttr)
 <LI><a href="#[52]">Core_GetXYZActionID</a> from core.o(i.Core_GetXYZActionID) referenced from core.o(i.Core_XYZActionHandle)
 <LI><a href="#[56]">Core_PauseOff</a> from core.o(i.Core_PauseOff) referenced from funclogic.o(i.MChair_FuncExe)
 <LI><a href="#[56]">Core_PauseOff</a> from core.o(i.Core_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[55]">Core_PauseOn</a> from core.o(i.Core_PauseOn) referenced from funclogic.o(i.MChair_FuncExe)
 <LI><a href="#[55]">Core_PauseOn</a> from core.o(i.Core_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[144]">Core_TCSActionHandle</a> from core.o(i.Core_TCSActionHandle) referenced from core.o(.constdata)
 <LI><a href="#[143]">Core_XYZActionHandle</a> from core.o(i.Core_XYZActionHandle) referenced from core.o(.constdata)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5c]">Default_GetKeyValID</a> from sysmode.o(i.Default_GetKeyValID) referenced from sysmode.o(i.SysMode_DefaultKeyValHandle)
 <LI><a href="#[5d]">Default_KeyValAdditonOp</a> from sysmode.o(i.Default_KeyValAdditonOp) referenced from sysmode.o(i.SysMode_DefaultKeyValHandle)
 <LI><a href="#[9b]">Default_Key_Power</a> from sysmode.o(i.Default_Key_Power) referenced from sysmode.o(.constdata)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from bsp_exti.o(i.EXTI0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[85]">FaultCheck_02</a> from realtimeinspect.o(i.FaultCheck_02) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[86]">FaultCheck_03</a> from realtimeinspect.o(i.FaultCheck_03) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[87]">FaultCheck_05</a> from realtimeinspect.o(i.FaultCheck_05) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[88]">FaultCheck_06</a> from realtimeinspect.o(i.FaultCheck_06) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[89]">FaultCheck_32</a> from realtimeinspect.o(i.FaultCheck_32) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[8a]">FaultCheck_40</a> from realtimeinspect.o(i.FaultCheck_40) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[8b]">FaultCheck_41</a> from realtimeinspect.o(i.FaultCheck_41) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[8c]">FaultCheck_44</a> from realtimeinspect.o(i.FaultCheck_44) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[8d]">FaultCheck_46</a> from realtimeinspect.o(i.FaultCheck_46) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[8e]">FaultCheck_48</a> from realtimeinspect.o(i.FaultCheck_48) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[8f]">FaultCheck_49</a> from realtimeinspect.o(i.FaultCheck_49) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[90]">FaultCheck_50</a> from realtimeinspect.o(i.FaultCheck_50) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[91]">FaultCheck_59</a> from realtimeinspect.o(i.FaultCheck_59) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[92]">FaultCheck_63</a> from realtimeinspect.o(i.FaultCheck_63) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[93]">FaultCheck_68</a> from realtimeinspect.o(i.FaultCheck_68) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[94]">FaultCheck_69</a> from realtimeinspect.o(i.FaultCheck_69) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[95]">FaultCheck_70</a> from realtimeinspect.o(i.FaultCheck_70) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[96]">FaultCheck_71</a> from realtimeinspect.o(i.FaultCheck_71) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[97]">FaultCheck_72</a> from realtimeinspect.o(i.FaultCheck_72) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[98]">FaultCheck_73</a> from realtimeinspect.o(i.FaultCheck_73) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[99]">FaultCheck_74</a> from realtimeinspect.o(i.FaultCheck_74) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[151]">FeetSpike_ActionHandle</a> from feetspike.o(i.FeetSpike_ActionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[54]">FeetSpike_CountIOCheck_CB</a> from feetspike.o(i.FeetSpike_CountIOCheck_CB) referenced from feetspike.o(i.FeetSpike_Init)
 <LI><a href="#[71]">FeetSpike_PauseOff</a> from feetspike.o(i.FeetSpike_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[61]">FeetSpike_PauseOn</a> from feetspike.o(i.FeetSpike_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[14f]">FeetSpike_PositionHandle</a> from feetspike.o(i.FeetSpike_PositionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[150]">FeetSpike_PositionIOCheck</a> from feetspike.o(i.FeetSpike_PositionIOCheck) referenced from spike.o(.constdata)
 <LI><a href="#[145]">Gas_ActionHandle</a> from gas.o(i.Gas_ActionHandle) referenced from gas.o(.constdata)
 <LI><a href="#[12b]">Gas_CDPDataObjRx_0x48</a> from gas.o(i.Gas_CDPDataObjRx_0x48) referenced from cdp.o(.constdata)
 <LI><a href="#[6e]">Gas_PauseOff</a> from gas.o(i.Gas_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[5e]">Gas_PauseOn</a> from gas.o(i.Gas_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[147]">Heat_AllPartsHandle</a> from heat.o(i.Heat_AllPartsHandle) referenced from heat.o(.constdata)
 <LI><a href="#[12a]">Heat_CDPDataObjRx_0x41</a> from heat.o(i.Heat_CDPDataObjRx_0x41) referenced from cdp.o(.constdata)
 <LI><a href="#[7a]">Heat_CalvesHeatPauseOff</a> from heat.o(i.Heat_CalvesHeatPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[6a]">Heat_CalvesHeatPauseOn</a> from heat.o(i.Heat_CalvesHeatPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[79]">Heat_FeetHeatPauseOff</a> from heat.o(i.Heat_FeetHeatPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[69]">Heat_FeetHeatPauseOn</a> from heat.o(i.Heat_FeetHeatPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[7c]">Heat_LumbarBackHeatPauseOff</a> from heat.o(i.Heat_LumbarBackHeatPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[6c]">Heat_LumbarBackHeatPauseOn</a> from heat.o(i.Heat_LumbarBackHeatPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[7b]">Heat_SeatHeatPauseOff</a> from heat.o(i.Heat_SeatHeatPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[6b]">Heat_SeatHeatPauseOn</a> from heat.o(i.Heat_SeatHeatPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[130]">IAP_CDPDataObj_0x01</a> from cdp.o(i.IAP_CDPDataObj_0x01) referenced from cdp.o(.constdata)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[148]">Led_AllPartsHandle</a> from led.o(i.Led_AllPartsHandle) referenced from led.o(.constdata)
 <LI><a href="#[7d]">Led_PauseOff</a> from led.o(i.Led_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[6d]">Led_PauseOn</a> from led.o(i.Led_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[154]">LegFlexSpike_ActionHandle</a> from legflexspike.o(i.LegFlexSpike_ActionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[12e]">LegFlexSpike_CDPDataObjRx_0x4B</a> from legflexspike.o(i.LegFlexSpike_CDPDataObjRx_0x4B) referenced from cdp.o(.constdata)
 <LI><a href="#[153]">LegFlexSpike_IOCheck</a> from legflexspike.o(i.LegFlexSpike_IOCheck) referenced from spike.o(.constdata)
 <LI><a href="#[72]">LegFlexSpike_PauseOff</a> from legflexspike.o(i.LegFlexSpike_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[62]">LegFlexSpike_PauseOn</a> from legflexspike.o(i.LegFlexSpike_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[152]">LegFlexSpike_PositionHandle</a> from legflexspike.o(i.LegFlexSpike_PositionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[a5]">MChair_FuncExe</a> from funclogic.o(i.MChair_FuncExe) referenced from sysmode.o(.constdata)
 <LI><a href="#[11a]">MChair_FuncExe_CoreAuto</a> from funcauto_core.o(i.MChair_FuncExe_CoreAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[112]">MChair_FuncExe_CoreGasAuto</a> from funcauto_coregas.o(i.MChair_FuncExe_CoreGasAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[10e]">MChair_FuncExe_CoreGasSpikeAuto</a> from funcauto_coregasspike.o(i.MChair_FuncExe_CoreGasSpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[10c]">MChair_FuncExe_CoreMannual</a> from funcmannual_core.o(i.MChair_FuncExe_CoreMannual) referenced from funclogic.o(.constdata)
 <LI><a href="#[110]">MChair_FuncExe_CoreSpikeAuto</a> from funcauto_corespike.o(i.MChair_FuncExe_CoreSpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[118]">MChair_FuncExe_GasAuto</a> from funcauto_gas.o(i.MChair_FuncExe_GasAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[108]">MChair_FuncExe_GasMannual</a> from funcmannual_gas.o(i.MChair_FuncExe_GasMannual) referenced from funclogic.o(.constdata)
 <LI><a href="#[114]">MChair_FuncExe_GasSpikeAuto</a> from funcauto_gasspike.o(i.MChair_FuncExe_GasSpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[11c]">MChair_FuncExe_GridComboAuto</a> from funcauto_gridcombo.o(i.MChair_FuncExe_GridComboAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[120]">MChair_FuncExe_HeatMA</a> from funcma_heat.o(i.MChair_FuncExe_HeatMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[124]">MChair_FuncExe_LedMA</a> from funcma_led.o(i.MChair_FuncExe_LedMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[11e]">MChair_FuncExe_RollerMA</a> from funcma_roller.o(i.MChair_FuncExe_RollerMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[116]">MChair_FuncExe_SpikeAuto</a> from funcauto_spike.o(i.MChair_FuncExe_SpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[10a]">MChair_FuncExe_SpikeMannual</a> from funcmannual_spike.o(i.MChair_FuncExe_SpikeMannual) referenced from funclogic.o(.constdata)
 <LI><a href="#[122]">MChair_FuncExe_VibMA</a> from funcma_vib.o(i.MChair_FuncExe_VibMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[119]">MChair_FuncSwitch_CoreAuto</a> from funcauto_core.o(i.MChair_FuncSwitch_CoreAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[111]">MChair_FuncSwitch_CoreGasAuto</a> from funcauto_coregas.o(i.MChair_FuncSwitch_CoreGasAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[10d]">MChair_FuncSwitch_CoreGasSpikeAuto</a> from funcauto_coregasspike.o(i.MChair_FuncSwitch_CoreGasSpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[10b]">MChair_FuncSwitch_CoreMannual</a> from funcmannual_core.o(i.MChair_FuncSwitch_CoreMannual) referenced from funclogic.o(.constdata)
 <LI><a href="#[10f]">MChair_FuncSwitch_CoreSpikeAuto</a> from funcauto_corespike.o(i.MChair_FuncSwitch_CoreSpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[117]">MChair_FuncSwitch_GasAuto</a> from funcauto_gas.o(i.MChair_FuncSwitch_GasAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[107]">MChair_FuncSwitch_GasMannual</a> from funcmannual_gas.o(i.MChair_FuncSwitch_GasMannual) referenced from funclogic.o(.constdata)
 <LI><a href="#[113]">MChair_FuncSwitch_GasSpikeAuto</a> from funcauto_gasspike.o(i.MChair_FuncSwitch_GasSpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[11b]">MChair_FuncSwitch_GridComboAuto</a> from funcauto_gridcombo.o(i.MChair_FuncSwitch_GridComboAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[11f]">MChair_FuncSwitch_HeatMA</a> from funcma_heat.o(i.MChair_FuncSwitch_HeatMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[123]">MChair_FuncSwitch_LedMA</a> from funcma_led.o(i.MChair_FuncSwitch_LedMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[11d]">MChair_FuncSwitch_RollerMA</a> from funcma_roller.o(i.MChair_FuncSwitch_RollerMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[115]">MChair_FuncSwitch_SpikeAuto</a> from funcauto_spike.o(i.MChair_FuncSwitch_SpikeAuto) referenced from funclogic.o(.constdata)
 <LI><a href="#[109]">MChair_FuncSwitch_SpikeMannual</a> from funcmannual_spike.o(i.MChair_FuncSwitch_SpikeMannual) referenced from funclogic.o(.constdata)
 <LI><a href="#[121]">MChair_FuncSwitch_VibMA</a> from funcma_vib.o(i.MChair_FuncSwitch_VibMA) referenced from funclogic.o(.constdata)
 <LI><a href="#[125]">MChair_KeyValHandle_CDPDataObjRx_0x01</a> from system.o(i.MChair_KeyValHandle_CDPDataObjRx_0x01) referenced from cdp.o(.constdata)
 <LI><a href="#[126]">MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F</a> from functabhandle.o(i.MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F) referenced 2 times from cdp.o(.constdata)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[146]">Pump_ActionHandle</a> from gas.o(i.Pump_ActionHandle) referenced from gas.o(.constdata)
 <LI><a href="#[f]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[9a]">RealTimeInspect_FaultCheck</a> from realtimeinspect.o(i.RealTimeInspect_FaultCheck) referenced from realtimeinspect.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[149]">Roller_AllPartsHandle</a> from roller.o(i.Roller_AllPartsHandle) referenced from roller.o(.constdata)
 <LI><a href="#[12c]">Roller_CDPDataObjRx_0x49</a> from roller.o(i.Roller_CDPDataObjRx_0x49) referenced from cdp.o(.constdata)
 <LI><a href="#[58]">Roller_CalvesRollerPauseOff</a> from roller.o(i.Roller_CalvesRollerPauseOff) referenced from funclogic.o(i.MChair_FuncExe)
 <LI><a href="#[58]">Roller_CalvesRollerPauseOff</a> from roller.o(i.Roller_CalvesRollerPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[57]">Roller_CalvesRollerPauseOn</a> from roller.o(i.Roller_CalvesRollerPauseOn) referenced from funclogic.o(i.MChair_FuncExe)
 <LI><a href="#[57]">Roller_CalvesRollerPauseOn</a> from roller.o(i.Roller_CalvesRollerPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[78]">Roller_FeetRollerPauseOff</a> from roller.o(i.Roller_FeetRollerPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[68]">Roller_FeetRollerPauseOn</a> from roller.o(i.Roller_FeetRollerPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[127]">SaveData_CDPDataObjRx_0x3D</a> from savedata.o(i.SaveData_CDPDataObjRx_0x3D) referenced from cdp.o(.constdata)
 <LI><a href="#[128]">SaveData_CDPDataObjRx_0x3E</a> from savedata.o(i.SaveData_CDPDataObjRx_0x3E) referenced from cdp.o(.constdata)
 <LI><a href="#[84]">SaveData_Update</a> from savedata.o(i.SaveData_Update) referenced from savedata.o(.constdata)
 <LI><a href="#[50]">ServerCDPDataObjID</a> from cdp.o(i.ServerCDPDataObjID) referenced from cdp.o(i.CDP_DataObjRxHandle)
 <LI><a href="#[131]">Server_CDPDataObjRX_0x0040</a> from server.o(i.Server_CDPDataObjRX_0x0040) referenced from cdp.o(.constdata)
 <LI><a href="#[132]">Server_CDPDataObjRX_0x0042</a> from server.o(i.Server_CDPDataObjRX_0x0042) referenced from cdp.o(.constdata)
 <LI><a href="#[133]">Server_CDPDataObjRX_0x0043</a> from server.o(i.Server_CDPDataObjRX_0x0043) referenced from cdp.o(.constdata)
 <LI><a href="#[134]">Server_CDPDataObjRX_0x0702</a> from server.o(i.Server_CDPDataObjRX_0x0702) referenced from cdp.o(.constdata)
 <LI><a href="#[135]">Server_CDPDataObjRX_0x0901</a> from server.o(i.Server_CDPDataObjRX_0x0901) referenced from cdp.o(.constdata)
 <LI><a href="#[136]">Server_CDPDataObjRX_0x0912</a> from server.o(i.Server_CDPDataObjRX_0x0912) referenced from cdp.o(.constdata)
 <LI><a href="#[137]">Server_CDPDataObjRX_0x0913</a> from server.o(i.Server_CDPDataObjRX_0x0913) referenced from cdp.o(.constdata)
 <LI><a href="#[138]">Server_CDPDataObjRX_0x0C60</a> from server.o(i.Server_CDPDataObjRX_0x0C60) referenced from cdp.o(.constdata)
 <LI><a href="#[139]">Server_CDPDataObjRX_0x0D01</a> from server.o(i.Server_CDPDataObjRX_0x0D01) referenced from cdp.o(.constdata)
 <LI><a href="#[13a]">Server_CDPDataObjRX_0x0D02</a> from server.o(i.Server_CDPDataObjRX_0x0D02) referenced from cdp.o(.constdata)
 <LI><a href="#[12f]">SideCtrl_CDPDataObjRx_0x50</a> from cdp.o(i.SideCtrl_CDPDataObjRx_0x50) referenced from cdp.o(.constdata)
 <LI><a href="#[5a]">Spike_LegLenDetectPauseOff</a> from spike.o(i.Spike_LegLenDetectPauseOff) referenced from funclogic.o(i.MChair_FuncExe)
 <LI><a href="#[59]">Spike_LegLenDetectPauseOn</a> from spike.o(i.Spike_LegLenDetectPauseOn) referenced from funclogic.o(i.MChair_FuncExe)
 <LI><a href="#[14b]">Spike_MoveActionHandle</a> from spike.o(i.Spike_MoveActionHandle) referenced from spike.o(.constdata)
 <LI><a href="#[155]">Spike_ResetHandle</a> from spike.o(i.Spike_ResetHandle) referenced from spike.o(.constdata)
 <LI><a href="#[7e]">StandBy_GetKeyValID</a> from sysmode_standby.o(i.StandBy_GetKeyValID) referenced from sysmode_standby.o(i.SysMode_Standby_Handle)
 <LI><a href="#[bf]">StandBy_Key_EngiModeSelect</a> from sysmode_standby.o(i.StandBy_Key_EngiModeSelect) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[b8]">StandBy_Key_InspectAuto</a> from sysmode_standby.o(i.StandBy_Key_InspectAuto) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[b9]">StandBy_Key_InspectManual</a> from sysmode_standby.o(i.StandBy_Key_InspectManual) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[af]">StandBy_Key_NoKeyPress</a> from sysmode_standby.o(i.StandBy_Key_NoKeyPress) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[ba]">StandBy_Key_PackingAngle</a> from sysmode_standby.o(i.StandBy_Key_PackingAngle) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[b1]">StandBy_Key_Pause</a> from sysmode_standby.o(i.StandBy_Key_Pause) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[b0]">StandBy_Key_Power</a> from sysmode_standby.o(i.StandBy_Key_Power) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[b5]">StandBy_Key_SpikeBackDownFeetUp</a> from sysmode_standby.o(i.StandBy_Key_SpikeBackDownFeetUp) referenced 2 times from sysmode_standby.o(.constdata)
 <LI><a href="#[b4]">StandBy_Key_SpikeBackUpFeetDown</a> from sysmode_standby.o(i.StandBy_Key_SpikeBackUpFeetDown) referenced 3 times from sysmode_standby.o(.constdata)
 <LI><a href="#[b3]">StandBy_Key_SpikeFeetDown</a> from sysmode_standby.o(i.StandBy_Key_SpikeFeetDown) referenced 2 times from sysmode_standby.o(.constdata)
 <LI><a href="#[b2]">StandBy_Key_SpikeFeetUp</a> from sysmode_standby.o(i.StandBy_Key_SpikeFeetUp) referenced 2 times from sysmode_standby.o(.constdata)
 <LI><a href="#[c9]">StandBy_Key_SpikeHomeReset</a> from sysmode_standby.o(i.StandBy_Key_SpikeHomeReset) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c6]">StandBy_Key_SpikeLegExtend</a> from sysmode_standby.o(i.StandBy_Key_SpikeLegExtend) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c7]">StandBy_Key_SpikeLegShorten</a> from sysmode_standby.o(i.StandBy_Key_SpikeLegShorten) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c8]">StandBy_Key_SpikeZeroGravity</a> from sysmode_standby.o(i.StandBy_Key_SpikeZeroGravity) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[b6]">StandBy_Key_SpikeZeroGravity1</a> from sysmode_standby.o(i.StandBy_Key_SpikeZeroGravity1) referenced 2 times from sysmode_standby.o(.constdata)
 <LI><a href="#[b7]">StandBy_Key_SpikeZeroGravity2</a> from sysmode_standby.o(i.StandBy_Key_SpikeZeroGravity2) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[bd]">StandBy_Key_TestAge</a> from sysmode_standby.o(i.StandBy_Key_TestAge) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[bb]">StandBy_Key_TestNoTimer</a> from sysmode_standby.o(i.StandBy_Key_TestNoTimer) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[be]">StandBy_Key_TestOther1</a> from sysmode_standby.o(i.StandBy_Key_TestOther1) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[bc]">StandBy_Key_TestSpike</a> from sysmode_standby.o(i.StandBy_Key_TestSpike) referenced from sysmode_standby.o(.constdata)
 <LI><a href="#[7f]">Standby_KeyValAdditonOp</a> from sysmode_standby.o(i.Standby_KeyValAdditonOp) referenced from sysmode_standby.o(i.SysMode_Standby_Handle)
 <LI><a href="#[9d]">SysMode_ERPPowerHandle</a> from sysmode.o(i.SysMode_ERPPowerHandle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a9]">SysMode_InspectAuto_Handle</a> from sysmode_venderinspectauto.o(i.SysMode_InspectAuto_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[9f]">SysMode_InspectAuto_Timer</a> from sysmode_venderinspectauto.o(i.SysMode_InspectAuto_Timer) referenced from sysmode.o(.constdata)
 <LI><a href="#[aa]">SysMode_InspectManual_Handle</a> from sysmode_venderinspectmannual.o(i.SysMode_InspectManual_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a0]">SysMode_InspectManual_Timer</a> from sysmode_venderinspectmannual.o(i.SysMode_InspectManual_Timer) referenced from sysmode.o(.constdata)
 <LI><a href="#[ad]">SysMode_InspectOther1_Handle</a> from sysmode_venderinspectother1.o(i.SysMode_InspectOther1_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a2]">SysMode_InspectOther1_Timer</a> from sysmode_venderinspectother1.o(i.SysMode_InspectOther1_Timer) referenced from sysmode.o(.constdata)
 <LI><a href="#[ae]">SysMode_InspectOther2_Handle</a> from sysmode_venderinspectother2.o(i.SysMode_InspectOther2_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a3]">SysMode_InspectOther2_Timer</a> from sysmode_venderinspectother2.o(i.SysMode_InspectOther2_Timer) referenced from sysmode.o(.constdata)
 <LI><a href="#[a4]">SysMode_OnOffKeyCheck</a> from sysmode.o(i.SysMode_OnOffKeyCheck) referenced from sysmode.o(.constdata)
 <LI><a href="#[ac]">SysMode_Packing_Handle</a> from sysmode_venderpacking.o(i.SysMode_Packing_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[9c]">SysMode_PauseHandle</a> from sysmode.o(i.SysMode_PauseHandle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a6]">SysMode_StandBy_EngiModeSelcetTLHandle</a> from sysmode_standby.o(i.SysMode_StandBy_EngiModeSelcetTLHandle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a7]">SysMode_Standby_Handle</a> from sysmode_standby.o(i.SysMode_Standby_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[ab]">SysMode_TestSpike_Handle</a> from sysmode_vendertestspike.o(i.SysMode_TestSpike_Handle) referenced from sysmode.o(.constdata)
 <LI><a href="#[a1]">SysMode_TestSpike_Timer</a> from sysmode_vendertestspike.o(i.SysMode_TestSpike_Timer) referenced from sysmode.o(.constdata)
 <LI><a href="#[a8]">SysMode_UserRun_Handle</a> from sysmode_userrun.o(i.SysMode_UserRun_Handle) referenced 3 times from sysmode.o(.constdata)
 <LI><a href="#[9e]">SysMode_UserRun_Timer</a> from sysmode_userrun.o(i.SysMode_UserRun_Timer) referenced from sysmode.o(.constdata)
 <LI><a href="#[9]">SysTick_Handler</a> from bsp_systicker.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[82]">System_EvtHandle_CDPRx</a> from system.o(i.System_EvtHandle_CDPRx) referenced from system.o(.constdata)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">TIMER5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from bsp_gpio.o(i.TIMER6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from bsp_uart.o(i.UART3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from bsp_uart.o(i.UART4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from bsp_uart.o(i.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from bsp_uart.o(i.USART1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from bsp_uart.o(i.USART2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[80]">UserRun_GetKeyValID</a> from sysmode_userrun.o(i.UserRun_GetKeyValID) referenced from sysmode_userrun.o(i.SysMode_UserRun_Handle)
 <LI><a href="#[81]">UserRun_KeyValAdditonOp</a> from sysmode_userrun.o(i.UserRun_KeyValAdditonOp) referenced from sysmode_userrun.o(i.SysMode_UserRun_Handle)
 <LI><a href="#[fe]">UserRun_Key_AutoGridCombo</a> from sysmode_userrun.o(i.UserRun_Key_AutoGridCombo) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f4]">UserRun_Key_AutoLady</a> from sysmode_userrun.o(i.UserRun_Key_AutoLady) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[fc]">UserRun_Key_AutoLumbarButtockPress</a> from sysmode_userrun.o(i.UserRun_Key_AutoLumbarButtockPress) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[fb]">UserRun_Key_AutoLumbarButtockRecovery</a> from sysmode_userrun.o(i.UserRun_Key_AutoLumbarButtockRecovery) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[fa]">UserRun_Key_AutoLumbarButtockRelax</a> from sysmode_userrun.o(i.UserRun_Key_AutoLumbarButtockRelax) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[fd]">UserRun_Key_AutoLumbarKidneyCare</a> from sysmode_userrun.o(i.UserRun_Key_AutoLumbarKidneyCare) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f5]">UserRun_Key_AutoMan</a> from sysmode_userrun.o(i.UserRun_Key_AutoMan) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f0]">UserRun_Key_AutoMoveSleep</a> from sysmode_userrun.o(i.UserRun_Key_AutoMoveSleep) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ee]">UserRun_Key_AutoQuick</a> from sysmode_userrun.o(i.UserRun_Key_AutoQuick) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ef]">UserRun_Key_AutoRelax</a> from sysmode_userrun.o(i.UserRun_Key_AutoRelax) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f2]">UserRun_Key_AutoScraping</a> from sysmode_userrun.o(i.UserRun_Key_AutoScraping) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f3]">UserRun_Key_AutoShiatsu</a> from sysmode_userrun.o(i.UserRun_Key_AutoShiatsu) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f7]">UserRun_Key_AutoShoulderRecovery</a> from sysmode_userrun.o(i.UserRun_Key_AutoShoulderRecovery) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f6]">UserRun_Key_AutoShoulderRelax</a> from sysmode_userrun.o(i.UserRun_Key_AutoShoulderRelax) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f9]">UserRun_Key_AutoShoulderShiatsu</a> from sysmode_userrun.o(i.UserRun_Key_AutoShoulderShiatsu) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f8]">UserRun_Key_AutoShoulderTuina</a> from sysmode_userrun.o(i.UserRun_Key_AutoShoulderTuina) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[f1]">UserRun_Key_AutoStretch</a> from sysmode_userrun.o(i.UserRun_Key_AutoStretch) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c5]">UserRun_Key_BluetoothSwitch</a> from sysmode_userrun.o(i.UserRun_Key_BluetoothSwitch) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c4]">UserRun_Key_BodyCheckOk</a> from sysmode_userrun.o(i.UserRun_Key_BodyCheckOk) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[dd]">UserRun_Key_CoreClap</a> from sysmode_userrun.o(i.UserRun_Key_CoreClap) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d7]">UserRun_Key_CoreFlexLevel</a> from sysmode_userrun.o(i.UserRun_Key_CoreFlexLevel) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[db]">UserRun_Key_CoreKnead</a> from sysmode_userrun.o(i.UserRun_Key_CoreKnead) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d6]">UserRun_Key_CoreMannualBack</a> from sysmode_userrun.o(i.UserRun_Key_CoreMannualBack) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d4]">UserRun_Key_CoreMannualDown</a> from sysmode_userrun.o(i.UserRun_Key_CoreMannualDown) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d5]">UserRun_Key_CoreMannualFront</a> from sysmode_userrun.o(i.UserRun_Key_CoreMannualFront) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d3]">UserRun_Key_CoreMannualUp</a> from sysmode_userrun.o(i.UserRun_Key_CoreMannualUp) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d9]">UserRun_Key_CorePart</a> from sysmode_userrun.o(i.UserRun_Key_CorePart) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[da]">UserRun_Key_CoreRoll</a> from sysmode_userrun.o(i.UserRun_Key_CoreRoll) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[de]">UserRun_Key_CoreShiatsu</a> from sysmode_userrun.o(i.UserRun_Key_CoreShiatsu) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d8]">UserRun_Key_CoreSpot</a> from sysmode_userrun.o(i.UserRun_Key_CoreSpot) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[cf]">UserRun_Key_CoreTCSSpeed</a> from sysmode_userrun.o(i.UserRun_Key_CoreTCSSpeed) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[cd]">UserRun_Key_CoreTCSSpeedAdd</a> from sysmode_userrun.o(i.UserRun_Key_CoreTCSSpeedAdd) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ce]">UserRun_Key_CoreTCSSpeedDec</a> from sysmode_userrun.o(i.UserRun_Key_CoreTCSSpeedDec) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[dc]">UserRun_Key_CoreTap</a> from sysmode_userrun.o(i.UserRun_Key_CoreTap) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d2]">UserRun_Key_CoreWidth</a> from sysmode_userrun.o(i.UserRun_Key_CoreWidth) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d0]">UserRun_Key_CoreWidthAdd</a> from sysmode_userrun.o(i.UserRun_Key_CoreWidthAdd) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[d1]">UserRun_Key_CoreWidthDec</a> from sysmode_userrun.o(i.UserRun_Key_CoreWidthDec) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[df]">UserRun_Key_CoreXYZAction</a> from sysmode_userrun.o(i.UserRun_Key_CoreXYZAction) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[cc]">UserRun_Key_CoreXYZSpeed</a> from sysmode_userrun.o(i.UserRun_Key_CoreXYZSpeed) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ca]">UserRun_Key_CoreXYZSpeedAdd</a> from sysmode_userrun.o(i.UserRun_Key_CoreXYZSpeedAdd) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[cb]">UserRun_Key_CoreXYZSpeedDec</a> from sysmode_userrun.o(i.UserRun_Key_CoreXYZSpeedDec) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e4]">UserRun_Key_GasArms</a> from sysmode_userrun.o(i.UserRun_Key_GasArms) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e6]">UserRun_Key_GasCalves</a> from sysmode_userrun.o(i.UserRun_Key_GasCalves) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e7]">UserRun_Key_GasFullGas</a> from sysmode_userrun.o(i.UserRun_Key_GasFullGas) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e2]">UserRun_Key_GasIntensity</a> from sysmode_userrun.o(i.UserRun_Key_GasIntensity) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e0]">UserRun_Key_GasIntensityAdd</a> from sysmode_userrun.o(i.UserRun_Key_GasIntensityAdd) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e1]">UserRun_Key_GasIntensityDec</a> from sysmode_userrun.o(i.UserRun_Key_GasIntensityDec) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e5]">UserRun_Key_GasLumbarSeat</a> from sysmode_userrun.o(i.UserRun_Key_GasLumbarSeat) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e8]">UserRun_Key_GasPartSelcet</a> from sysmode_userrun.o(i.UserRun_Key_GasPartSelcet) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e9]">UserRun_Key_GasQuickGas</a> from sysmode_userrun.o(i.UserRun_Key_GasQuickGas) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[e3]">UserRun_Key_GasShoulder</a> from sysmode_userrun.o(i.UserRun_Key_GasShoulder) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ea]">UserRun_Key_HeatLumbarBack</a> from sysmode_userrun.o(i.UserRun_Key_HeatLumbarBack) referenced 2 times from sysmode_userrun.o(.constdata)
 <LI><a href="#[ff]">UserRun_Key_InspectAuto</a> from sysmode_userrun.o(i.UserRun_Key_InspectAuto) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[100]">UserRun_Key_InspectManual</a> from sysmode_userrun.o(i.UserRun_Key_InspectManual) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[102]">UserRun_Key_InspectOther1</a> from sysmode_userrun.o(i.UserRun_Key_InspectOther1) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[103]">UserRun_Key_InspectOther2</a> from sysmode_userrun.o(i.UserRun_Key_InspectOther2) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c0]">UserRun_Key_NoKeyPress</a> from sysmode_userrun.o(i.UserRun_Key_NoKeyPress) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[101]">UserRun_Key_PackingAngle</a> from sysmode_userrun.o(i.UserRun_Key_PackingAngle) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c2]">UserRun_Key_Pause</a> from sysmode_userrun.o(i.UserRun_Key_Pause) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c1]">UserRun_Key_Power</a> from sysmode_userrun.o(i.UserRun_Key_Power) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[eb]">UserRun_Key_RollerCalves</a> from sysmode_userrun.o(i.UserRun_Key_RollerCalves) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ec]">UserRun_Key_RollerFeet</a> from sysmode_userrun.o(i.UserRun_Key_RollerFeet) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[ed]">UserRun_Key_SleepLed</a> from sysmode_userrun.o(i.UserRun_Key_SleepLed) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[106]">UserRun_Key_TestAge</a> from sysmode_userrun.o(i.UserRun_Key_TestAge) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[104]">UserRun_Key_TestNoTimer</a> from sysmode_userrun.o(i.UserRun_Key_TestNoTimer) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[105]">UserRun_Key_TestSpike</a> from sysmode_userrun.o(i.UserRun_Key_TestSpike) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[c3]">UserRun_Key_Timer</a> from sysmode_userrun.o(i.UserRun_Key_Timer) referenced from sysmode_userrun.o(.constdata)
 <LI><a href="#[14a]">Vib_AllPartsHandle</a> from vib.o(i.Vib_AllPartsHandle) referenced from vib.o(.constdata)
 <LI><a href="#[12d]">Vib_CDPDataObjRx_0x4A</a> from vib.o(i.Vib_CDPDataObjRx_0x4A) referenced from cdp.o(.constdata)
 <LI><a href="#[75]">Vib_CalvesVibPauseOff</a> from vib.o(i.Vib_CalvesVibPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[65]">Vib_CalvesVibPauseOn</a> from vib.o(i.Vib_CalvesVibPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[74]">Vib_FeetVibPauseOff</a> from vib.o(i.Vib_FeetVibPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[64]">Vib_FeetVibPauseOn</a> from vib.o(i.Vib_FeetVibPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[77]">Vib_LumbarBackVibPauseOff</a> from vib.o(i.Vib_LumbarBackVibPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[67]">Vib_LumbarBackVibPauseOn</a> from vib.o(i.Vib_LumbarBackVibPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[76]">Vib_SeatVibPauseOff</a> from vib.o(i.Vib_SeatVibPauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[66]">Vib_SeatVibPauseOn</a> from vib.o(i.Vib_SeatVibPauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[163]">VoiceKey_AutoLadyOn</a> from server.o(i.VoiceKey_AutoLadyOn) referenced from server.o(.constdata)
 <LI><a href="#[164]">VoiceKey_AutoManOn</a> from server.o(i.VoiceKey_AutoManOn) referenced from server.o(.constdata)
 <LI><a href="#[15f]">VoiceKey_AutoMoveSleepOn</a> from server.o(i.VoiceKey_AutoMoveSleepOn) referenced from server.o(.constdata)
 <LI><a href="#[15d]">VoiceKey_AutoQuickOn</a> from server.o(i.VoiceKey_AutoQuickOn) referenced from server.o(.constdata)
 <LI><a href="#[15e]">VoiceKey_AutoRelaxOn</a> from server.o(i.VoiceKey_AutoRelaxOn) referenced from server.o(.constdata)
 <LI><a href="#[161]">VoiceKey_AutoScrapingOn</a> from server.o(i.VoiceKey_AutoScrapingOn) referenced from server.o(.constdata)
 <LI><a href="#[162]">VoiceKey_AutoShiatsuOn</a> from server.o(i.VoiceKey_AutoShiatsuOn) referenced from server.o(.constdata)
 <LI><a href="#[160]">VoiceKey_AutoStretchOn</a> from server.o(i.VoiceKey_AutoStretchOn) referenced from server.o(.constdata)
 <LI><a href="#[15a]">VoiceKey_Default</a> from server.o(i.VoiceKey_Default) referenced 4 times from server.o(.constdata)
 <LI><a href="#[15c]">VoiceKey_HeatLumbarBackOff</a> from server.o(i.VoiceKey_HeatLumbarBackOff) referenced from server.o(.constdata)
 <LI><a href="#[15b]">VoiceKey_HeatLumbarBackOn</a> from server.o(i.VoiceKey_HeatLumbarBackOn) referenced from server.o(.constdata)
 <LI><a href="#[159]">VoiceKey_PauseOff</a> from server.o(i.VoiceKey_PauseOff) referenced from server.o(.constdata)
 <LI><a href="#[158]">VoiceKey_PauseOn</a> from server.o(i.VoiceKey_PauseOn) referenced from server.o(.constdata)
 <LI><a href="#[157]">VoiceKey_PowerOff</a> from server.o(i.VoiceKey_PowerOff) referenced from server.o(.constdata)
 <LI><a href="#[156]">VoiceKey_PowerOn</a> from server.o(i.VoiceKey_PowerOn) referenced from server.o(.constdata)
 <LI><a href="#[5b]">VoiceLogicID</a> from server.o(i.VoiceLogicID) referenced from server.o(i.Server_CDPDataObjRX_0x0702)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[70]">ZeroSpike_PauseOff</a> from zerospike.o(i.ZeroSpike_PauseOff) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[60]">ZeroSpike_PauseOn</a> from zerospike.o(i.ZeroSpike_PauseOn) referenced from sysmode.o(i.SysMode_PauseHandle)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[2e2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[165]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2e4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2e5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2e6]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2e7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2e8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_WriteIDCode
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetIDCode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_CDPDataObjRx_0x3E
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_CDPDataObjRx_0x3D
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDURxHandle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_CDPDataObjRx_0x4A
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D01
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0042
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0C60
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0913
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0912
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0702
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CDPDataObjRx_0x49
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_CDPDataObjRx_0x4B
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_CDPDataObjRx_0x41
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_CDPDataObjRx_0x48
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_CDPDataObjRx_0x40
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideCtrl_CDPDataObjRx_0x50
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GridComboAuto
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
</UL>

<P><STRONG><a name="[2e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_ChInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Load
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D01
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_Init
</UL>

<P><STRONG><a name="[2ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[28c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D02
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D01
</UL>

<P><STRONG><a name="[166]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2ed]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, bsp_adc.o(i.ADC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_data_read
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>ActionObjHandle_AccompanyFunc</STRONG> (Thumb, 386 bytes, Stack size 12 bytes, functabhandle.o(i.ActionObjHandle_AccompanyFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>

<P><STRONG><a name="[16e]"></a>ActionObjHandle_CoreAuto</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, functabhandle.o(i.ActionObjHandle_CoreAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ActionObjHandle_CoreAuto
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZPosition
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetYPosition
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSAction
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZActionSpeed
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSActionSpeed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZAction
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXYZActionCompleteRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>

<P><STRONG><a name="[177]"></a>ActionObjHandle_Gas</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, functabhandle.o(i.ActionObjHandle_Gas))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
</UL>

<P><STRONG><a name="[17a]"></a>ActionObjHandle_SpikeAuto</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, functabhandle.o(i.ActionObjHandle_SpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ActionObjHandle_SpikeAuto
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexMove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetAngle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackAngle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_GetPosition
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetZeroAngle
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexMove
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
</UL>

<P><STRONG><a name="[183]"></a>ActionTabStep_IterateHandle</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, functabhandle.o(i.ActionTabStep_IterateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ActionTabStep_IterateHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_ResetXYZActionStep
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>

<P><STRONG><a name="[26f]"></a>ActionTabStep_TimeHandle</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, functabhandle.o(i.ActionTabStep_TimeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ActionTabStep_TimeHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>

<P><STRONG><a name="[185]"></a>BSP_FEEP_Init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, bsp_feep.o(i.BSP_FEEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_FEEP_Init &rArr; BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[284]"></a>BSP_FEEP_Read</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, bsp_feep.o(i.BSP_FEEP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_FEEP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Load
</UL>

<P><STRONG><a name="[189]"></a>BSP_FEEP_Write</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, bsp_feep.o(i.BSP_FEEP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_FEEP_Write &rArr; BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_WriteIDCode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Update
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Load
</UL>

<P><STRONG><a name="[187]"></a>BSP_FLASH_Erase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_flash.o(i.BSP_FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_FLASH_Erase &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Write
</UL>

<P><STRONG><a name="[188]"></a>BSP_FLASH_ProgramWord</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_flash.o(i.BSP_FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Write
</UL>

<P><STRONG><a name="[190]"></a>BSP_IO_4959_BackReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_4959_BackReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_4959_BackReset
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_ResetHandle
</UL>

<P><STRONG><a name="[191]"></a>BSP_IO_4959_FeetReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_4959_FeetReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_4959_FeetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_ResetHandle
</UL>

<P><STRONG><a name="[192]"></a>BSP_IO_DVR8804_Ouput</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_gpio.o(i.BSP_IO_DVR8804_Ouput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_IO_DVR8804_Ouput
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_GasCtrl
</UL>

<P><STRONG><a name="[28e]"></a>BSP_IO_EnableInputInterrupt_BackSpikeCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_EnableInputInterrupt_BackSpikeCount))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Handle
</UL>

<P><STRONG><a name="[28f]"></a>BSP_IO_EnableInputInterrupt_FeetSpikeCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_EnableInputInterrupt_FeetSpikeCount))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Handle
</UL>

<P><STRONG><a name="[290]"></a>BSP_IO_EnableInputInterrupt_ZeroSpikeCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_EnableInputInterrupt_ZeroSpikeCount))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Handle
</UL>

<P><STRONG><a name="[1e0]"></a>BSP_IO_GetERPPowerSwState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_GetERPPowerSwState))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_FaultCheck
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_FaultCheck
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_FaultCheck
</UL>

<P><STRONG><a name="[1cc]"></a>BSP_IO_GetVenderTestPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_GetVenderTestPin))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_GetCSFlag
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[194]"></a>BSP_IO_Init</STRONG> (Thumb, 522 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_IO_Init &rArr; BSP_IO_TimerTrigReadInputInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_USART2_TX_PB10_RX_PB11
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_USART1_TX_PD5_RX_PD6
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_USART0_TX_PA9_RX_PA10
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_TIMER3_PD12_13_14_15
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1c6]"></a>BSP_IO_InputInterrupt_RegCB_BackSpikeCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_InputInterrupt_RegCB_BackSpikeCount))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_Init
</UL>

<P><STRONG><a name="[221]"></a>BSP_IO_InputInterrupt_RegCB_FeetSpikeCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_InputInterrupt_RegCB_FeetSpikeCount))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_Init
</UL>

<P><STRONG><a name="[19c]"></a>BSP_IO_ReadInput_BackMotoFault</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_ReadInput_BackMotoFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_ReadInput_BackMotoFault
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_ResetHandle
</UL>

<P><STRONG><a name="[19e]"></a>BSP_IO_ReadInput_FeetMotoFault</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_ReadInput_FeetMotoFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_ReadInput_FeetMotoFault
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_ResetHandle
</UL>

<P><STRONG><a name="[19f]"></a>BSP_IO_ReadInput_PowerKeyState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_ReadInput_PowerKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_ReadInput_PowerKeyState
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_OnOffKeyCheck
</UL>

<P><STRONG><a name="[1a0]"></a>BSP_IO_SetOutput_BackSpikeCtrl</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_BackSpikeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_IO_SetOutput_BackSpikeCtrl &rArr; BSP_PWMTmr_SetBackSpikeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_SetBackSpikeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_ActionHandle
</UL>

<P><STRONG><a name="[2ce]"></a>BSP_IO_SetOutput_BluetoothSwitch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_BluetoothSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_BluetoothSwitch
</UL>

<P><STRONG><a name="[1a2]"></a>BSP_IO_SetOutput_CloseAll</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_CloseAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_IO_SetOutput_CloseAll &rArr; BSP_IO_SetOutput_PumpGasCtrl &rArr; BSP_IO_SetOutput_GasCtrl &rArr; BSP_IO_DVR8804_Ouput
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_ERPPowerSw
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_ZeroSpikeCtrl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_PumpGasCtrl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_LegFlexSpikeCtrl
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_FeetSpikeCtrl
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_BackSpikeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CDPDataObj_0x01
</UL>

<P><STRONG><a name="[1a3]"></a>BSP_IO_SetOutput_ERPPowerSw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_ERPPowerSw))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_ERPPowerHandle
</UL>

<P><STRONG><a name="[1a4]"></a>BSP_IO_SetOutput_FeetSpikeCtrl</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_FeetSpikeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_IO_SetOutput_FeetSpikeCtrl &rArr; BSP_PWMTmr_SetFeetSpikeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_SetFeetSpikeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_ActionHandle
</UL>

<P><STRONG><a name="[1a9]"></a>BSP_IO_SetOutput_GasCtrl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_GasCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_IO_SetOutput_GasCtrl &rArr; BSP_IO_DVR8804_Ouput
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_DVR8804_Ouput
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_PumpGasCtrl
</UL>

<P><STRONG><a name="[22b]"></a>BSP_IO_SetOutput_LedLogo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_LedLogo))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_AllPartsHandle
</UL>

<P><STRONG><a name="[22c]"></a>BSP_IO_SetOutput_LedProjection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_LedProjection))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_AllPartsHandle
</UL>

<P><STRONG><a name="[1a5]"></a>BSP_IO_SetOutput_LegFlexSpikeCtrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_LegFlexSpikeCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
</UL>

<P><STRONG><a name="[1aa]"></a>BSP_IO_SetOutput_PumpCtrl</STRONG> (Thumb, 498 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_PumpCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IO_SetOutput_PumpCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pump_ActionHandle
</UL>

<P><STRONG><a name="[1a7]"></a>BSP_IO_SetOutput_PumpGasCtrl</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_PumpGasCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_IO_SetOutput_PumpGasCtrl &rArr; BSP_IO_SetOutput_GasCtrl &rArr; BSP_IO_DVR8804_Ouput
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_GasCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_ActionHandle
</UL>

<P><STRONG><a name="[1a6]"></a>BSP_IO_SetOutput_ZeroSpikeCtrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_IO_SetOutput_ZeroSpikeCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
</UL>

<P><STRONG><a name="[19b]"></a>BSP_IO_TimerTrigReadInputInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_gpio.o(i.BSP_IO_TimerTrigReadInputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_IO_TimerTrigReadInputInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[1b0]"></a>BSP_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BSP_Init &rArr; BSP_UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTicker_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_ERPPowerSw
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_4959_FeetReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_4959_BackReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1b2]"></a>BSP_PWMTmr_Init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bsp_pwmtmr.o(i.BSP_PWMTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_PWMTmr_Init &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a1]"></a>BSP_PWMTmr_SetBackSpikeDuty</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_pwmtmr.o(i.BSP_PWMTmr_SetBackSpikeDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PWMTmr_SetBackSpikeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_BackSpikeCtrl
</UL>

<P><STRONG><a name="[1a8]"></a>BSP_PWMTmr_SetFeetSpikeDuty</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_pwmtmr.o(i.BSP_PWMTmr_SetFeetSpikeDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PWMTmr_SetFeetSpikeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_FeetSpikeCtrl
</UL>

<P><STRONG><a name="[21b]"></a>BSP_SysTicker_CalLag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_systicker.o(i.BSP_SysTicker_CalLag))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>

<P><STRONG><a name="[1b4]"></a>BSP_SysTicker_Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, bsp_systicker.o(i.BSP_SysTicker_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_SysTicker_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[205]"></a>BSP_UART_GetTxState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_uart.o(i.BSP_UART_GetTxState))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameTxHandle
</UL>

<P><STRONG><a name="[1b3]"></a>BSP_UART_Init</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1e2]"></a>BSP_UART_RegRxByteCB</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_uart.o(i.BSP_UART_RegRxByteCB))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_Init
</UL>

<P><STRONG><a name="[1c1]"></a>BSP_UART_TxData</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_UART_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_OutPut
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameTxHandle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AckTmrToApp_DataTx
</UL>

<P><STRONG><a name="[14e]"></a>BackSpike_ActionHandle</STRONG> (Thumb, 610 bytes, Stack size 8 bytes, backspike.o(i.BackSpike_ActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BackSpike_ActionHandle &rArr; BSP_IO_SetOutput_BackSpikeCtrl &rArr; BSP_PWMTmr_SetBackSpikeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_BackSpikeCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>BackSpike_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[17e]"></a>BackSpike_GetPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_GetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeHomeReset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideCtrl_CDPDataObjTx_0x50
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[1c3]"></a>BackSpike_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, backspike.o(i.BackSpike_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BackSpike_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_InputInterrupt_RegCB_BackSpikeCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_ResetPosition
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
</UL>

<P><STRONG><a name="[6f]"></a>BackSpike_PauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[5f]"></a>BackSpike_PauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[14c]"></a>BackSpike_PositionHandle</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, backspike.o(i.BackSpike_PositionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BackSpike_PositionHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>BackSpike_PositionIOCheck</STRONG> (Thumb, 558 bytes, Stack size 8 bytes, backspike.o(i.BackSpike_PositionIOCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BackSpike_PositionIOCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>BackSpike_ResetPosition</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_ResetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_Init
</UL>

<P><STRONG><a name="[2aa]"></a>BackSpike_SetCountFaultCheckSw</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_SetCountFaultCheckSw))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Handle
</UL>

<P><STRONG><a name="[293]"></a>BackSpike_SetPosition</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_SetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[1d6]"></a>BinarySearch</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, commonlib.o(i.BinarySearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_KeyValHandle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0702
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataObjRxHandle
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXYZMannualManageAttr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_XYZActionHandle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_TCSActionHandle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_AnalyzeApp
</UL>

<P><STRONG><a name="[2b4]"></a>BodyScan_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bodyscan.o(i.BodyScan_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1c8]"></a>BodyScan_Handle</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, bodyscan.o(i.BodyScan_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BodyScan_Handle &rArr; PAUSE_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAUSE_ON
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAUSE_OFF
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_GetVenderTestPin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegLenDetectExtendMax
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetRunSw
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetCurveCheckSw
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanGetYCount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanGetCSFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[1d2]"></a>BodyScan_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bodyscan.o(i.BodyScan_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BodyScan_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegLenDetectExtendMax
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetReScanCheckSw
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
</UL>

<P><STRONG><a name="[73]"></a>BodyScan_PauseOff</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bodyscan.o(i.BodyScan_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[63]"></a>BodyScan_PauseOn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bodyscan.o(i.BodyScan_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[1d4]"></a>CDP_AckTmrToApp_DataTx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cdp_cenapp.o(i.CDP_AckTmrToApp_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CDP_AckTmrToApp_DataTx &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenTmrToApp_DataTx
</UL>

<P><STRONG><a name="[1d5]"></a>CDP_AppToCen_AnalyzeApp</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, cdp_cenapp.o(i.CDP_AppToCen_AnalyzeApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDP_AppToCen_AnalyzeApp &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_ByteRx
</UL>

<P><STRONG><a name="[140]"></a>CDP_AppToCen_CfgNetwork</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_AppToCen_CfgNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDP_AppToCen_CfgNetwork &rArr; Server_SetIntData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_ReReportedData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_SetIntState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_SetIntData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenapp.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>CDP_AppToCen_GetIDCode</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_AppToCen_GetIDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDP_AppToCen_GetIDCode &rArr; SaveData_GetIDCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetIDCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenapp.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>CDP_AppToCen_HeartbeatPacket</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cdp_cenapp.o(i.CDP_AppToCen_HeartbeatPacket))
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenapp.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>CDP_AppToCen_KeyValHandle</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_AppToCen_KeyValHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CDP_AppToCen_KeyValHandle &rArr; ESF_EvtQuene_Post &rArr; ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenapp.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>CDP_CenApp_DataTx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_CenApp_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_CenApp_DataTx &rArr; CDP_FrameTxHandle &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameTxHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUTxHandle
</UL>

<P><STRONG><a name="[13e]"></a>CDP_CenApp_FaultCheck</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_CenApp_FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDP_CenApp_FaultCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_GetERPPowerSwState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>CDP_CenApp_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_CenApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDP_CenApp_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RegRxByteCB
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Init
</UL>

<P><STRONG><a name="[1e3]"></a>CDP_CenServer_DataTx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cdp_censerver.o(i.CDP_CenServer_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_CenServer_DataTx &rArr; CDP_FrameTxHandle &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameTxHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUTxHandle
</UL>

<P><STRONG><a name="[13d]"></a>CDP_CenServer_FaultCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cdp_censerver.o(i.CDP_CenServer_FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDP_CenServer_FaultCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_GetERPPowerSwState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>CDP_CenServer_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cdp_censerver.o(i.CDP_CenServer_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1e4]"></a>CDP_CenServer_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cdp_censerver.o(i.CDP_CenServer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDP_CenServer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RegRxByteCB
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Init
</UL>

<P><STRONG><a name="[1e5]"></a>CDP_CenStateTmrToApp_DataTx</STRONG> (Thumb, 3260 bytes, Stack size 32 bytes, cdp_cenapp.o(i.CDP_CenStateTmrToApp_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDP_CenStateTmrToApp_DataTx &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZPosition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetMoveAdjustRoll
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_GetCSFlag
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_GetLumbarBackRightTemperature
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_GetLumbarBackLeftTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenTmrToApp_DataTx
</UL>

<P><STRONG><a name="[1ed]"></a>CDP_CenStateTmrToCtrl_DataTx</STRONG> (Thumb, 3564 bytes, Stack size 16 bytes, cdp_cenxxx.o(i.CDP_CenStateTmrToCtrl_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CDP_CenStateTmrToCtrl_DataTx &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZPosition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetMoveAdjustRoll
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_GetLumbarBackRightTemperature
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_GetLumbarBackLeftTemperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1ee]"></a>CDP_CenTmrToApp_DataTx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cdp_cenapp.o(i.CDP_CenTmrToApp_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_CenTmrToApp_DataTx &rArr; CDP_CenStateTmrToApp_DataTx &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AckTmrToApp_DataTx
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1f0]"></a>CDP_CenXxx_DataTx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cdp_cenxxx.o(i.CDP_CenXxx_DataTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_CenXxx_DataTx &rArr; CDP_FrameTxHandle &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameTxHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUTxHandle
</UL>

<P><STRONG><a name="[13c]"></a>CDP_CenXxx_FaultCheck</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, cdp_cenxxx.o(i.CDP_CenXxx_FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDP_CenXxx_FaultCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_GetERPPowerSwState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>CDP_CenXxx_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cdp_cenxxx.o(i.CDP_CenXxx_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1f1]"></a>CDP_CenXxx_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cdp_cenxxx.o(i.CDP_CenXxx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDP_CenXxx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_RegRxByteCB
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Init
</UL>

<P><STRONG><a name="[1ef]"></a>CDP_CtrlToCen_AnalyzeCtrl</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, cdp_cenxxx.o(i.CDP_CtrlToCen_AnalyzeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CDP_CtrlToCen_AnalyzeCtrl &rArr; ESF_EvtQuene_Post &rArr; ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_ByteRx
</UL>

<P><STRONG><a name="[1f2]"></a>CDP_DataObjRxHandle</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, cdp.o(i.CDP_DataObjRxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDP_DataObjRxHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDURxHandle
</UL>

<P><STRONG><a name="[13b]"></a>CDP_DataTxTmrHandle</STRONG> (Thumb, 878 bytes, Stack size 40 bytes, cdp.o(i.CDP_DataTxTmrHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CDP_DataTxTmrHandle &rArr; CDP_CenTmrToApp_DataTx &rArr; CDP_CenStateTmrToApp_DataTx &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_ReReportedData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_GetCSFlag
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D02
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D01
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0912
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004C
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0043
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0042
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0041
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0040
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CDPDataObjTx_0x49
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_CDPDataObjTx_0x4B
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_CDPDataObjTx_0x41
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_CDPDataObjTx_0x48
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_CDPDataObjTx_0x40
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenTmrToApp_DataTx
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_GetCSFlag
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideCtrl_CDPDataObjTx_0x50
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUPackTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>CDP_FrameRxHandle</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, cdp.o(i.CDP_FrameRxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CDP_FrameRxHandle &rArr; CumulativeSum_Check &rArr; CumulativeSum_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CumulativeSum_Check
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_ByteRx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_ByteRx
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_ByteRx
</UL>

<P><STRONG><a name="[1df]"></a>CDP_FrameTxHandle</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, cdp.o(i.CDP_FrameTxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDP_FrameTxHandle &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CumulativeSum_Cal
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_GetTxState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_DataTx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_DataTx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_DataTx
</UL>

<P><STRONG><a name="[2c3]"></a>CDP_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cdp.o(i.CDP_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[207]"></a>CDP_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cdp.o(i.CDP_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[209]"></a>CDP_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cdp.o(i.CDP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CDP_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1f6]"></a>CDP_PDUPackTx</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, cdp.o(i.CDP_PDUPackTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_PDUPackTx &rArr; ESF_EvtQuene_Post &rArr; ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[20b]"></a>CDP_PDURxHandle</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, cdp.o(i.CDP_PDURxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CDP_PDURxHandle &rArr; CDP_DataObjRxHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_SetKeyExeState
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_GetCSFlag
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataObjRxHandle
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_EvtHandle_CDPRx
</UL>

<P><STRONG><a name="[83]"></a>CDP_PDUTxHandle</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cdp.o(i.CDP_PDUTxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CDP_PDUTxHandle &rArr; CDP_CenXxx_DataTx &rArr; CDP_FrameTxHandle &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_DataTx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenServer_DataTx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenApp_DataTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>Core_BackScanGetCSFlag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, core.o(i.Core_BackScanGetCSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Core_BackScanGetCSFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[1d0]"></a>Core_BackScanGetYCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core.o(i.Core_BackScanGetYCount))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[4b]"></a>Core_BackScanPauseOff</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, core.o(i.Core_BackScanPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> bodyscan.o(i.BodyScan_Handle)
</UL>
<P><STRONG><a name="[4a]"></a>Core_BackScanPauseOn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, core.o(i.Core_BackScanPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> bodyscan.o(i.BodyScan_Handle)
</UL>
<P><STRONG><a name="[1cb]"></a>Core_BackScanSetCurveCheckSw</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, core.o(i.Core_BackScanSetCurveCheckSw))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[1d3]"></a>Core_BackScanSetReScanCheckSw</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, core.o(i.Core_BackScanSetReScanCheckSw))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Init
</UL>

<P><STRONG><a name="[1ca]"></a>Core_BackScanSetRunSw</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, core.o(i.Core_BackScanSetRunSw))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[2cf]"></a>Core_BackScanSetShoulderAdjustOp</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, core.o(i.Core_BackScanSetShoulderAdjustOp))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_NoKeyPress
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualUp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualDown
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_BodyCheckOk
</UL>

<P><STRONG><a name="[129]"></a>Core_CDPDataObjRx_0x40</STRONG> (Thumb, 948 bytes, Stack size 24 bytes, core.o(i.Core_CDPDataObjRx_0x40))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Core_CDPDataObjRx_0x40
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>Core_CDPDataObjTx_0x40</STRONG> (Thumb, 414 bytes, Stack size 0 bytes, core.o(i.Core_CDPDataObjTx_0x40))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[2b6]"></a>Core_GetActionRunFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, core.o(i.Core_GetActionRunFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Core_GetActionRunFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2b5]"></a>Core_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i.Core_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1e8]"></a>Core_GetMoveAdjustRoll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core.o(i.Core_GetMoveAdjustRoll))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualUp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualDown
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[267]"></a>Core_GetRollRange</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core.o(i.Core_GetRollRange))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreSpot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CorePart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreMannual
</UL>

<P><STRONG><a name="[2ba]"></a>Core_GetTCSMotorState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i.Core_GetTCSMotorState))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2b7]"></a>Core_GetXMotorState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i.Core_GetXMotorState))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1e6]"></a>Core_GetXPosition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, core.o(i.Core_GetXPosition))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[176]"></a>Core_GetXYZActionCompleteRepeat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, core.o(i.Core_GetXYZActionCompleteRepeat))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
</UL>

<P><STRONG><a name="[20e]"></a>Core_GetXYZMannualManageAttr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, core.o(i.Core_GetXYZMannualManageAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Core_GetXYZMannualManageAttr &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreMannual
</UL>

<P><STRONG><a name="[2b8]"></a>Core_GetYMotorState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i.Core_GetYMotorState))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1e9]"></a>Core_GetYPosition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, core.o(i.Core_GetYPosition))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Enter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0D02
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreMannual
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[2b9]"></a>Core_GetZMotorState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i.Core_GetZMotorState))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1e7]"></a>Core_GetZPosition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, core.o(i.Core_GetZPosition))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[20f]"></a>Core_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, core.o(i.Core_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Core_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[210]"></a>Core_Init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, core.o(i.Core_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Core_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[56]"></a>Core_PauseOff</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, core.o(i.Core_PauseOff))
<BR>[Address Reference Count : 2]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
<LI> funclogic.o(i.MChair_FuncExe)
</UL>
<P><STRONG><a name="[55]"></a>Core_PauseOn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, core.o(i.Core_PauseOn))
<BR>[Address Reference Count : 2]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
<LI> funclogic.o(i.MChair_FuncExe)
</UL>
<P><STRONG><a name="[184]"></a>Core_ResetXYZActionStep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, core.o(i.Core_ResetXYZActionStep))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_XYZActionHandle
</UL>

<P><STRONG><a name="[211]"></a>Core_SetAction</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, core.o(i.Core_SetAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSAction
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZAction
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreMannual
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreMannual
</UL>

<P><STRONG><a name="[29e]"></a>Core_SetMoveAdjustRoll</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, core.o(i.Core_SetMoveAdjustRoll))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_NoKeyPress
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualUp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualDown
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_NoKeyPress
</UL>

<P><STRONG><a name="[213]"></a>Core_SetRollRange</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, core.o(i.Core_SetRollRange))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreSpot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CorePart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreMannual
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_XYZActionHandle
</UL>

<P><STRONG><a name="[175]"></a>Core_SetTCSAction</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, core.o(i.Core_SetTCSAction))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
</UL>

<P><STRONG><a name="[173]"></a>Core_SetTCSActionSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core.o(i.Core_SetTCSActionSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreMannual
</UL>

<P><STRONG><a name="[16f]"></a>Core_SetXPosition</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, core.o(i.Core_SetXPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreMannual
</UL>

<P><STRONG><a name="[174]"></a>Core_SetXYZAction</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, core.o(i.Core_SetXYZAction))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
</UL>

<P><STRONG><a name="[172]"></a>Core_SetXYZActionSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core.o(i.Core_SetXYZActionSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreMannual
</UL>

<P><STRONG><a name="[212]"></a>Core_SetXYZPosition</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, core.o(i.Core_SetXYZPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Core_SetXYZPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZPosition
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetYPosition
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreMannual
</UL>

<P><STRONG><a name="[170]"></a>Core_SetYPosition</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, core.o(i.Core_SetYPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
</UL>

<P><STRONG><a name="[2af]"></a>Core_SetZMBackProtectDisableSw</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, core.o(i.Core_SetZMBackProtectDisableSw))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Timer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
</UL>

<P><STRONG><a name="[171]"></a>Core_SetZPosition</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, core.o(i.Core_SetZPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreMannual
</UL>

<P><STRONG><a name="[2ae]"></a>Core_ShoulderAdjustRe</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, core.o(i.Core_ShoulderAdjustRe))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
</UL>

<P><STRONG><a name="[144]"></a>Core_TCSActionHandle</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, core.o(i.Core_TCSActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Core_TCSActionHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> core.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>Core_XYZActionHandle</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, core.o(i.Core_XYZActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Core_XYZActionHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetRollRange
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_ResetXYZActionStep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> core.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>Critical_Enter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, commonlib.o(i.Critical_Enter))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Pend
</UL>

<P><STRONG><a name="[217]"></a>Critical_Exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, commonlib.o(i.Critical_Exit))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Pend
</UL>

<P><STRONG><a name="[206]"></a>CumulativeSum_Cal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, commonlib.o(i.CumulativeSum_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CumulativeSum_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CumulativeSum_Check
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameTxHandle
</UL>

<P><STRONG><a name="[204]"></a>CumulativeSum_Check</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, commonlib.o(i.CumulativeSum_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CumulativeSum_Check &rArr; CumulativeSum_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CumulativeSum_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameRxHandle
</UL>

<P><STRONG><a name="[5d]"></a>Default_KeyValAdditonOp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, sysmode.o(i.Default_KeyValAdditonOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Default_KeyValAdditonOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_DefaultKeyValHandle)
</UL>
<P><STRONG><a name="[29f]"></a>ERPPower_OffHandle</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, sysmode.o(i.ERPPower_OffHandle))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_ERPPowerHandle
</UL>

<P><STRONG><a name="[2a0]"></a>ERPPower_OnHandle</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sysmode.o(i.ERPPower_OnHandle))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_ERPPowerHandle
</UL>

<P><STRONG><a name="[215]"></a>ESF_EvtQuene_Pend</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, esf_evt.o(i.ESF_EvtQuene_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESF_EvtQuene_Pend
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Exit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_EvtHandle
</UL>

<P><STRONG><a name="[1dc]"></a>ESF_EvtQuene_Post</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, esf_evt.o(i.ESF_EvtQuene_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ESF_EvtQuene_Post &rArr; ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Exit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUTxHandle
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDURxHandle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideCtrl_CDPDataObjRx_0x50
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUPackTx
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameRxHandle
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_KeyValHandle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CtrlToCen_AnalyzeCtrl
</UL>

<P><STRONG><a name="[219]"></a>ESF_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, esf.o(i.ESF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESF_Init &rArr; ESF_MemBuf_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[218]"></a>ESF_MemBuf_Free</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, esf_mem.o(i.ESF_MemBuf_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Exit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_EvtHandle
</UL>

<P><STRONG><a name="[1db]"></a>ESF_MemBuf_Get</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, esf_mem.o(i.ESF_MemBuf_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESF_MemBuf_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Exit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Critical_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideCtrl_CDPDataObjRx_0x50
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDUPackTx
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameRxHandle
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_KeyValHandle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CtrlToCen_AnalyzeCtrl
</UL>

<P><STRONG><a name="[21a]"></a>ESF_MemBuf_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, esf_mem.o(i.ESF_MemBuf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESF_MemBuf_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_Init
</UL>

<P><STRONG><a name="[208]"></a>ESF_TmrExeFuncScheduling</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, esf_tmr.o(i.ESF_TmrExeFuncScheduling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_OutPut
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTicker_CalLag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_Handle
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Handle
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Handle
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Handle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_Handle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Handle
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Handle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_Handle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_Handle
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Handle
</UL>

<P><STRONG><a name="[20a]"></a>ESF_TmrExeFuncTabCheck</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, esf_tmr.o(i.ESF_TmrExeFuncTabCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ESF_TmrExeFuncTabCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Load
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTimeInspect_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Init
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>FaultCheck_02</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_02))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>FaultCheck_03</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_03))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>FaultCheck_05</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_05))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>FaultCheck_06</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_06))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>FaultCheck_32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_32))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>FaultCheck_40</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_40))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>FaultCheck_41</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_41))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>FaultCheck_44</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_44))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>FaultCheck_46</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_46))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>FaultCheck_48</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_48))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>FaultCheck_49</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_49))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>FaultCheck_50</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_50))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>FaultCheck_59</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_59))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>FaultCheck_63</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_63))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>FaultCheck_68</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_68))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>FaultCheck_69</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_69))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>FaultCheck_70</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_70))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>FaultCheck_71</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_71))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>FaultCheck_72</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_72))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>FaultCheck_73</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_73))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>FaultCheck_74</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, realtimeinspect.o(i.FaultCheck_74))
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>FeetSpike_ActionHandle</STRONG> (Thumb, 612 bytes, Stack size 8 bytes, feetspike.o(i.FeetSpike_ActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FeetSpike_ActionHandle &rArr; BSP_IO_SetOutput_FeetSpikeCtrl &rArr; BSP_PWMTmr_SetFeetSpikeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_FeetSpikeCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>FeetSpike_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[180]"></a>FeetSpike_GetPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_GetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeHomeReset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideCtrl_CDPDataObjTx_0x50
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[21f]"></a>FeetSpike_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, feetspike.o(i.FeetSpike_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FeetSpike_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_InputInterrupt_RegCB_FeetSpikeCount
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_ResetPosition
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
</UL>

<P><STRONG><a name="[71]"></a>FeetSpike_PauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[61]"></a>FeetSpike_PauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[14f]"></a>FeetSpike_PositionHandle</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, feetspike.o(i.FeetSpike_PositionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FeetSpike_PositionHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>FeetSpike_PositionIOCheck</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, feetspike.o(i.FeetSpike_PositionIOCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FeetSpike_PositionIOCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[220]"></a>FeetSpike_ResetPosition</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_ResetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_Init
</UL>

<P><STRONG><a name="[2ab]"></a>FeetSpike_SetCountFaultCheckSw</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_SetCountFaultCheckSw))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Handle
</UL>

<P><STRONG><a name="[295]"></a>FeetSpike_SetPosition</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_SetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[145]"></a>Gas_ActionHandle</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, gas.o(i.Gas_ActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gas_ActionHandle &rArr; BSP_IO_SetOutput_PumpGasCtrl &rArr; BSP_IO_SetOutput_GasCtrl &rArr; BSP_IO_DVR8804_Ouput
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_PumpGasCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gas.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>Gas_CDPDataObjRx_0x48</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gas.o(i.Gas_CDPDataObjRx_0x48))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gas_CDPDataObjRx_0x48
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>Gas_CDPDataObjTx_0x48</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gas.o(i.Gas_CDPDataObjTx_0x48))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[2bc]"></a>Gas_GetCSFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gas.o(i.Gas_GetCSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gas_GetCSFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2bd]"></a>Gas_GetGasPart1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gas.o(i.Gas_GetGasPart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gas_GetGasPart1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2be]"></a>Gas_GetGasPart2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gas.o(i.Gas_GetGasPart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gas_GetGasPart2
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[223]"></a>Gas_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gas.o(i.Gas_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Gas_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[224]"></a>Gas_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gas.o(i.Gas_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Gas_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[6e]"></a>Gas_PauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gas.o(i.Gas_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[5e]"></a>Gas_PauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gas.o(i.Gas_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[23b]"></a>Gas_SetCalvesPressureThreshold</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gas.o(i.Gas_SetCalvesPressureThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[179]"></a>Gas_SetGasPart</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, gas.o(i.Gas_SetGasPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gas_SetGasPart
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasAuto
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_Gas
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_RollerMA
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_GasMannual
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_RollerMA
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasMannual
</UL>

<P><STRONG><a name="[271]"></a>Gas_SetGasPartCtrlEnAdd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gas.o(i.Gas_SetGasPartCtrlEnAdd))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_UpdateMixOtherTabAttr
</UL>

<P><STRONG><a name="[238]"></a>Gas_SetGasPartCtrlEnOnly</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gas.o(i.Gas_SetGasPartCtrlEnOnly))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasSpikeAuto
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasAuto
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreGasSpikeAuto
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreGasAuto
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesGasCtrl
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_RollerMA
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_GasMannual
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_RollerMA
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasMannual
</UL>

<P><STRONG><a name="[178]"></a>Gas_SetPumpSw</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gas.o(i.Gas_SetPumpSw))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_Gas
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesGasCtrl
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_RollerMA
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_GasMannual
</UL>

<P><STRONG><a name="[245]"></a>GridComboAuto_CalNextRunTabIndex</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, funcauto_gridcombo.o(i.GridComboAuto_CalNextRunTabIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GridComboAuto_CalNextRunTabIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GridComboAuto
</UL>

<P><STRONG><a name="[256]"></a>GridComboAuto_UpdateComboSelectBit</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, funcauto_gridcombo.o(i.GridComboAuto_UpdateComboSelectBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GridComboAuto_UpdateComboSelectBit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
</UL>

<P><STRONG><a name="[147]"></a>Heat_AllPartsHandle</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, heat.o(i.Heat_AllPartsHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Heat_AllPartsHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SeatHeatHandle
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_LumbarBackHeatHandle
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_FeetHeatHandle
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_CalvesHeatHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heat.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>Heat_CDPDataObjRx_0x41</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, heat.o(i.Heat_CDPDataObjRx_0x41))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Heat_CDPDataObjRx_0x41
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>Heat_CDPDataObjTx_0x41</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heat.o(i.Heat_CDPDataObjTx_0x41))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[226]"></a>Heat_CalvesHeatHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_CalvesHeatHandle))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_AllPartsHandle
</UL>

<P><STRONG><a name="[7a]"></a>Heat_CalvesHeatPauseOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_CalvesHeatPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[6a]"></a>Heat_CalvesHeatPauseOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_CalvesHeatPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[225]"></a>Heat_FeetHeatHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_FeetHeatHandle))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_AllPartsHandle
</UL>

<P><STRONG><a name="[79]"></a>Heat_FeetHeatPauseOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_FeetHeatPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[69]"></a>Heat_FeetHeatPauseOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_FeetHeatPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[2c1]"></a>Heat_GetCSFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heat.o(i.Heat_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[1ea]"></a>Heat_GetLumbarBackLeftTemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, heat.o(i.Heat_GetLumbarBackLeftTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[1eb]"></a>Heat_GetLumbarBackRightTemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, heat.o(i.Heat_GetLumbarBackRightTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToCtrl_DataTx
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[229]"></a>Heat_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, heat.o(i.Heat_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Heat_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[22a]"></a>Heat_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, heat.o(i.Heat_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Heat_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[228]"></a>Heat_LumbarBackHeatHandle</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, heat.o(i.Heat_LumbarBackHeatHandle))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_AllPartsHandle
</UL>

<P><STRONG><a name="[7c]"></a>Heat_LumbarBackHeatPauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heat.o(i.Heat_LumbarBackHeatPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[6c]"></a>Heat_LumbarBackHeatPauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heat.o(i.Heat_LumbarBackHeatPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[227]"></a>Heat_SeatHeatHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_SeatHeatHandle))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_AllPartsHandle
</UL>

<P><STRONG><a name="[7b]"></a>Heat_SeatHeatPauseOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_SeatHeatPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[6b]"></a>Heat_SeatHeatPauseOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_SeatHeatPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[246]"></a>Heat_SetCalvesHeatWorkState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_SetCalvesHeatWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Calves
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_HeatMA
</UL>

<P><STRONG><a name="[247]"></a>Heat_SetFeetHeatWorkState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_SetFeetHeatWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Feet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_HeatMA
</UL>

<P><STRONG><a name="[248]"></a>Heat_SetLumbarBackHeatWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, heat.o(i.Heat_SetLumbarBackHeatWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_LumbarBack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_HeatMA
</UL>

<P><STRONG><a name="[269]"></a>Heat_SetSeatHeatWorkState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heat.o(i.Heat_SetSeatHeatWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Seat
</UL>

<P><STRONG><a name="[130]"></a>IAP_CDPDataObj_0x01</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cdp.o(i.IAP_CDPDataObj_0x01))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IAP_CDPDataObj_0x01 &rArr; BSP_IO_SetOutput_CloseAll &rArr; BSP_IO_SetOutput_PumpGasCtrl &rArr; BSP_IO_SetOutput_GasCtrl &rArr; BSP_IO_DVR8804_Ouput
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_CloseAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>Led_AllPartsHandle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(i.Led_AllPartsHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_AllPartsHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_LedProjection
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_LedLogo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>Led_GetCSFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, led.o(i.Led_GetCSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_GetCSFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[22d]"></a>Led_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.Led_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Led_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[22e]"></a>Led_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Led_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[7d]"></a>Led_PauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, led.o(i.Led_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[6d]"></a>Led_PauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, led.o(i.Led_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[24a]"></a>Led_SetLogoWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.Led_SetLogoWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_LedFuncReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_LedMA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_LedMA
</UL>

<P><STRONG><a name="[24b]"></a>Led_SetProjectionWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.Led_SetProjectionWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_LedFuncReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_LedMA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_LedMA
</UL>

<P><STRONG><a name="[249]"></a>Led_SetWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.Led_SetWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_LedFuncReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_LedMA
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_LedMA
</UL>

<P><STRONG><a name="[154]"></a>LegFlexSpike_ActionHandle</STRONG> (Thumb, 492 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_ActionHandle))
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>LegFlexSpike_CDPDataObjRx_0x4B</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, legflexspike.o(i.LegFlexSpike_CDPDataObjRx_0x4B))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LegFlexSpike_CDPDataObjRx_0x4B
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>LegFlexSpike_CDPDataObjTx_0x4B</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_CDPDataObjTx_0x4B))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[22f]"></a>LegFlexSpike_GetCSFlag</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, legflexspike.o(i.LegFlexSpike_GetCSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LegFlexSpike_GetCSFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_GetVenderTestPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[29a]"></a>LegFlexSpike_GetPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_GetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[153]"></a>LegFlexSpike_IOCheck</STRONG> (Thumb, 564 bytes, Stack size 4 bytes, legflexspike.o(i.LegFlexSpike_IOCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LegFlexSpike_IOCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>LegFlexSpike_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, legflexspike.o(i.LegFlexSpike_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LegFlexSpike_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
</UL>

<P><STRONG><a name="[72]"></a>LegFlexSpike_PauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[62]"></a>LegFlexSpike_PauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[152]"></a>LegFlexSpike_PositionHandle</STRONG> (Thumb, 170 bytes, Stack size 4 bytes, legflexspike.o(i.LegFlexSpike_PositionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LegFlexSpike_PositionHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>LegFlexSpike_SetAction</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_SetAction))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_PositionHandle
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_IOCheck
</UL>

<P><STRONG><a name="[296]"></a>LegFlexSpike_SetPosition</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_SetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[29b]"></a>LegFlexSpike_SetULegPosition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, legflexspike.o(i.LegFlexSpike_SetULegPosition))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[21c]"></a>Log_OutPut</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, commonlib.o(i.Log_OutPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>

<P><STRONG><a name="[2d4]"></a>MChair_CoreMannualVenderTest3DSwSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funcmannual_core.o(i.MChair_CoreMannualVenderTest3DSwSet))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_Timer
</UL>

<P><STRONG><a name="[232]"></a>MChair_EvtHandle_CDPCtrlRx</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, system.o(i.MChair_EvtHandle_CDPCtrlRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MChair_EvtHandle_CDPCtrlRx &rArr; MChair_KeyValHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_KeyValIsLong
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_KeyValHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_EvtHandle_CDPRx
</UL>

<P><STRONG><a name="[a5]"></a>MChair_FuncExe</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, funclogic.o(i.MChair_FuncExe))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MChair_FuncExe &rArr; BodyScan_Handle &rArr; PAUSE_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAUSE_ON
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAUSE_OFF
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegLenDetectSw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetFeetRollerKeepAtInitPosition
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_ClrFeetRollerKeepAtInitPosition
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetCalvesPressureThreshold
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_Switch
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExeAngleHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>MChair_FuncExeAngleHandle</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, funclogic.o(i.MChair_FuncExeAngleHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MChair_FuncExeAngleHandle &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_LegLenDetectRedo
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[11a]"></a>MChair_FuncExe_CoreAuto</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, funcauto_core.o(i.MChair_FuncExe_CoreAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MChair_FuncExe_CoreAuto &rArr; MChair_TabHandle_CoreAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>MChair_FuncExe_CoreGasAuto</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, funcauto_coregas.o(i.MChair_FuncExe_CoreGasAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MChair_FuncExe_CoreGasAuto &rArr; MChair_TabHandle_CoreMixOtherAuto &rArr; MChair_TabHandle_CoreAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>MChair_FuncExe_CoreGasSpikeAuto</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, funcauto_coregasspike.o(i.MChair_FuncExe_CoreGasSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MChair_FuncExe_CoreGasSpikeAuto &rArr; MChair_TabHandle_CoreGasSpikeAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>MChair_FuncExe_CoreMannual</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, funcmannual_core.o(i.MChair_FuncExe_CoreMannual))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MChair_FuncExe_CoreMannual &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZPosition
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZActionSpeed
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSActionSpeed
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>MChair_FuncExe_CoreSpikeAuto</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, funcauto_corespike.o(i.MChair_FuncExe_CoreSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MChair_FuncExe_CoreSpikeAuto &rArr; MChair_TabHandle_CoreSpikeAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>MChair_FuncExe_GasAuto</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, funcauto_gas.o(i.MChair_FuncExe_GasAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MChair_FuncExe_GasAuto &rArr; MChair_TabHandle_GasAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>MChair_FuncExe_GasMannual</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, funcmannual_gas.o(i.MChair_FuncExe_GasMannual))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MChair_FuncExe_GasMannual &rArr; MChair_TabHandle_GasAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>MChair_FuncExe_GasSpikeAuto</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, funcauto_gasspike.o(i.MChair_FuncExe_GasSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MChair_FuncExe_GasSpikeAuto &rArr; MChair_TabHandle_GasSpikeAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>MChair_FuncExe_GridComboAuto</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, funcauto_gridcombo.o(i.MChair_FuncExe_GridComboAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MChair_FuncExe_GridComboAuto &rArr; MChair_TabHandle_CoreMixOtherAuto &rArr; MChair_TabHandle_CoreAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridComboAuto_CalNextRunTabIndex
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>MChair_FuncExe_HeatMA</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, funcma_heat.o(i.MChair_FuncExe_HeatMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MChair_FuncExe_HeatMA
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetFeetHeatWorkState
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetLumbarBackHeatWorkState
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetCalvesHeatWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>MChair_FuncExe_LedMA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, funcma_led.o(i.MChair_FuncExe_LedMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MChair_FuncExe_LedMA
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetProjectionWorkState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetLogoWorkState
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>MChair_FuncExe_RollerMA</STRONG> (Thumb, 730 bytes, Stack size 24 bytes, funcma_roller.o(i.MChair_FuncExe_RollerMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MChair_FuncExe_RollerMA &rArr; Roller_CalvesGasCtrl &rArr; MChair_TabHandle_GasAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetFeetRollerWorkState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetCalvesRollerWorkState
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_FeetGasCtrl
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesGasCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>MChair_FuncExe_SpikeAuto</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, funcauto_spike.o(i.MChair_FuncExe_SpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MChair_FuncExe_SpikeAuto &rArr; MChair_TabHandle_SpikeAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetZeroSafetyAngleLimitRef
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>MChair_FuncExe_SpikeMannual</STRONG> (Thumb, 548 bytes, Stack size 16 bytes, funcmannual_spike.o(i.MChair_FuncExe_SpikeMannual))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MChair_FuncExe_SpikeMannual &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexMove
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexMove
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetMove
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackMove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>MChair_FuncExe_VibMA</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, funcma_vib.o(i.MChair_FuncExe_VibMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MChair_FuncExe_VibMA
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SetFeetVibWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>MChair_FuncLogic_ClearAllFunc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, funclogic.o(i.MChair_FuncLogic_ClearAllFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GridComboAuto_UpdateComboSelectBit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetMoveAction
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Seat
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_LumbarBack
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Feet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Calves
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Feet
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Calves
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_LedFuncReset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Seat
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_LumbarBack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Feet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Calves
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Enter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
</UL>

<P><STRONG><a name="[235]"></a>MChair_FuncLogic_Switch</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, funclogic.o(i.MChair_FuncLogic_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MChair_FuncLogic_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[263]"></a>MChair_FuncSwitch_CloseForNewFunc</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, funclogic.o(i.MChair_FuncSwitch_CloseForNewFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexAngle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexAngle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Seat
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_LumbarBack
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Feet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Calves
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Feet
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Calves
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Seat
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_LumbarBack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Feet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Calves
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_ResetXYZActionStep
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeAuto
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_GridComboAuto
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_GasSpikeAuto
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_GasAuto
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreSpikeAuto
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreGasSpikeAuto
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreGasAuto
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreAuto
</UL>

<P><STRONG><a name="[119]"></a>MChair_FuncSwitch_CoreAuto</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, funcauto_core.o(i.MChair_FuncSwitch_CoreAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_CoreAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>MChair_FuncSwitch_CoreGasAuto</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, funcauto_coregas.o(i.MChair_FuncSwitch_CoreGasAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_CoreGasAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>MChair_FuncSwitch_CoreGasSpikeAuto</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, funcauto_coregasspike.o(i.MChair_FuncSwitch_CoreGasSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_CoreGasSpikeAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>MChair_FuncSwitch_CoreMannual</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, funcmannual_core.o(i.MChair_FuncSwitch_CoreMannual))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MChair_FuncSwitch_CoreMannual &rArr; Core_GetXYZMannualManageAttr &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetRollRange
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetRollRange
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXYZMannualManageAttr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>MChair_FuncSwitch_CoreSpikeAuto</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, funcauto_corespike.o(i.MChair_FuncSwitch_CoreSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_CoreSpikeAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>MChair_FuncSwitch_GasAuto</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, funcauto_gas.o(i.MChair_FuncSwitch_GasAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_GasAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>MChair_FuncSwitch_GasMannual</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, funcmannual_gas.o(i.MChair_FuncSwitch_GasMannual))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MChair_FuncSwitch_GasMannual &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>MChair_FuncSwitch_GasSpikeAuto</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, funcauto_gasspike.o(i.MChair_FuncSwitch_GasSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_GasSpikeAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>MChair_FuncSwitch_GridComboAuto</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, funcauto_gridcombo.o(i.MChair_FuncSwitch_GridComboAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_GridComboAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>MChair_FuncSwitch_HeatMA</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, funcma_heat.o(i.MChair_FuncSwitch_HeatMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MChair_FuncSwitch_HeatMA &rArr; MChair_HeatFuncReset_Seat
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Seat
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_LumbarBack
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Feet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_HeatFuncReset_Calves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>MChair_FuncSwitch_LedMA</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, funcma_led.o(i.MChair_FuncSwitch_LedMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MChair_FuncSwitch_LedMA &rArr; MChair_LedFuncReset
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetProjectionWorkState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetLogoWorkState
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetWorkState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_LedFuncReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>MChair_FuncSwitch_RollerMA</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, funcma_roller.o(i.MChair_FuncSwitch_RollerMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MChair_FuncSwitch_RollerMA &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Feet
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Calves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>MChair_FuncSwitch_SpikeAuto</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, funcauto_spike.o(i.MChair_FuncSwitch_SpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MChair_FuncSwitch_SpikeAuto &rArr; MChair_FuncSwitch_CloseForNewFunc &rArr; MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>MChair_FuncSwitch_SpikeMannual</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, funcmannual_spike.o(i.MChair_FuncSwitch_SpikeMannual))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MChair_FuncSwitch_SpikeMannual &rArr; MChair_SetFuncAutoSpike &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_SetFuncAutoSpike
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexMove
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexMove
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetMove
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackMove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>MChair_FuncSwitch_VibMA</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, funcma_vib.o(i.MChair_FuncSwitch_VibMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MChair_FuncSwitch_VibMA &rArr; MChair_VibFuncReset_Seat
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Seat
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_LumbarBack
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Feet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Calves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(.constdata)
</UL>
<P><STRONG><a name="[2d0]"></a>MChair_GetFuncCoreMannualFlexLevelMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funcmannual_core.o(i.MChair_GetFuncCoreMannualFlexLevelMax))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualFront
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreMannualBack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreFlexLevel
</UL>

<P><STRONG><a name="[2d1]"></a>MChair_GetFuncCoreMannualWidthMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funcmannual_core.o(i.MChair_GetFuncCoreMannualWidthMax))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreWidthDec
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreWidthAdd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreWidth
</UL>

<P><STRONG><a name="[2d2]"></a>MChair_GetFuncCoreMannualXYZSpeedMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funcmannual_core.o(i.MChair_GetFuncCoreMannualXYZSpeedMax))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreXYZSpeedAdd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_CoreXYZSpeed
</UL>

<P><STRONG><a name="[25f]"></a>MChair_HeatFuncReset_Calves</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, funcma_heat.o(i.MChair_HeatFuncReset_Calves))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_HeatFuncReset_Calves
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetCalvesHeatWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_HeatMA
</UL>

<P><STRONG><a name="[25e]"></a>MChair_HeatFuncReset_Feet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, funcma_heat.o(i.MChair_HeatFuncReset_Feet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_HeatFuncReset_Feet
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetFeetHeatWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_HeatMA
</UL>

<P><STRONG><a name="[261]"></a>MChair_HeatFuncReset_LumbarBack</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, funcma_heat.o(i.MChair_HeatFuncReset_LumbarBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_HeatFuncReset_LumbarBack
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetLumbarBackHeatWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_HeatMA
</UL>

<P><STRONG><a name="[260]"></a>MChair_HeatFuncReset_Seat</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, funcma_heat.o(i.MChair_HeatFuncReset_Seat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_HeatFuncReset_Seat
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetSeatHeatWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_HeatMA
</UL>

<P><STRONG><a name="[233]"></a>MChair_KeyValHandle</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, system.o(i.MChair_KeyValHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MChair_KeyValHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_KeyValHandle_CDPDataObjRx_0x01
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_EvtHandle_CDPCtrlRx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0702
</UL>

<P><STRONG><a name="[125]"></a>MChair_KeyValHandle_CDPDataObjRx_0x01</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, system.o(i.MChair_KeyValHandle_CDPDataObjRx_0x01))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MChair_KeyValHandle_CDPDataObjRx_0x01 &rArr; MChair_KeyValHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_KeyValHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[234]"></a>MChair_KeyValIsLong</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(i.MChair_KeyValIsLong))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_EvtHandle_CDPCtrlRx
</UL>

<P><STRONG><a name="[262]"></a>MChair_LedFuncReset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_led.o(i.MChair_LedFuncReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_LedFuncReset
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetProjectionWorkState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetLogoWorkState
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_LedMA
</UL>

<P><STRONG><a name="[259]"></a>MChair_RollerFuncReset_Calves</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_roller.o(i.MChair_RollerFuncReset_Calves))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_RollerFuncReset_Calves
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetCalvesRollerWorkState
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesRollerResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_RollerMA
</UL>

<P><STRONG><a name="[258]"></a>MChair_RollerFuncReset_Feet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_roller.o(i.MChair_RollerFuncReset_Feet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_RollerFuncReset_Feet
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetFeetRollerWorkState
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_FeetRollerResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_RollerMA
</UL>

<P><STRONG><a name="[268]"></a>MChair_SetFuncAutoSpike</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, funcauto_spike.o(i.MChair_SetFuncAutoSpike))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MChair_SetFuncAutoSpike &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeZeroGravity
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_SpikeHomeReset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeMannual
</UL>

<P><STRONG><a name="[23d]"></a>MChair_TabHandle_CoreAuto</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, functabhandle.o(i.MChair_TabHandle_CoreAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MChair_TabHandle_CoreAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreAuto
</UL>

<P><STRONG><a name="[23f]"></a>MChair_TabHandle_CoreGasAuto</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabHandle_CoreGasAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MChair_TabHandle_CoreGasAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_Gas
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreGasAuto
</UL>

<P><STRONG><a name="[240]"></a>MChair_TabHandle_CoreGasSpikeAuto</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabHandle_CoreGasSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MChair_TabHandle_CoreGasSpikeAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_Gas
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreGasSpikeAuto
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
</UL>

<P><STRONG><a name="[23e]"></a>MChair_TabHandle_CoreMixOtherAuto</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, functabhandle.o(i.MChair_TabHandle_CoreMixOtherAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MChair_TabHandle_CoreMixOtherAuto &rArr; MChair_TabHandle_CoreAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_UpdateMixOtherTabAttr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GridComboAuto
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreGasAuto
</UL>

<P><STRONG><a name="[241]"></a>MChair_TabHandle_CoreSpikeAuto</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabHandle_CoreSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MChair_TabHandle_CoreSpikeAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_CoreAuto
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_CoreSpikeAuto
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
</UL>

<P><STRONG><a name="[242]"></a>MChair_TabHandle_GasAuto</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabHandle_GasAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MChair_TabHandle_GasAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_Gas
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasAuto
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesGasCtrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasMannual
</UL>

<P><STRONG><a name="[243]"></a>MChair_TabHandle_GasSpikeAuto</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabHandle_GasSpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MChair_TabHandle_GasSpikeAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_Gas
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_AccompanyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_GasSpikeAuto
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
</UL>

<P><STRONG><a name="[264]"></a>MChair_TabHandle_ResetMixOtherTabStep</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, functabhandle.o(i.MChair_TabHandle_ResetMixOtherTabStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MChair_TabHandle_ResetMixOtherTabStep &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexAngle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexAngle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
</UL>

<P><STRONG><a name="[251]"></a>MChair_TabHandle_SpikeAuto</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabHandle_SpikeAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MChair_TabHandle_SpikeAuto &rArr; MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_UpdateStepHopState
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_GetExeStepData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_TimeHandle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionTabStep_IterateHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeAuto
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
</UL>

<P><STRONG><a name="[270]"></a>MChair_TabHandle_UpdateMixOtherTabAttr</STRONG> (Thumb, 578 bytes, Stack size 8 bytes, functabhandle.o(i.MChair_TabHandle_UpdateMixOtherTabAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_TabHandle_UpdateMixOtherTabAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreMixOtherAuto
</UL>

<P><STRONG><a name="[126]"></a>MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, functabhandle.o(i.MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F &rArr; SysMode_UserRun_Enter &rArr; MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Enter
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_ChInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[273]"></a>MChair_TabTry_ChInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, functabhandle.o(i.MChair_TabTry_ChInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_TabTry_ChInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F
</UL>

<P><STRONG><a name="[26d]"></a>MChair_TabTry_GetExeStepData</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, functabhandle.o(i.MChair_TabTry_GetExeStepData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MChair_TabTry_GetExeStepData
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>

<P><STRONG><a name="[26c]"></a>MChair_TabTry_UpdateStepHopState</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, functabhandle.o(i.MChair_TabTry_UpdateStepHopState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_TabTry_UpdateStepHopState
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_SpikeAuto
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasSpikeAuto
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreSpikeAuto
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasSpikeAuto
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreGasAuto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_CoreAuto
</UL>

<P><STRONG><a name="[25b]"></a>MChair_VibFuncReset_Calves</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_vib.o(i.MChair_VibFuncReset_Calves))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_VibFuncReset_Calves
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SetCalvesVibWorkState
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_CalvesVibResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_VibMA
</UL>

<P><STRONG><a name="[25a]"></a>MChair_VibFuncReset_Feet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_vib.o(i.MChair_VibFuncReset_Feet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_VibFuncReset_Feet
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SetFeetVibWorkState
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_FeetVibResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_VibMA
</UL>

<P><STRONG><a name="[25d]"></a>MChair_VibFuncReset_LumbarBack</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_vib.o(i.MChair_VibFuncReset_LumbarBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_VibFuncReset_LumbarBack
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SetLumbarBackVibWorkState
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_LumbarBackVibResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_VibMA
</UL>

<P><STRONG><a name="[25c]"></a>MChair_VibFuncReset_Seat</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_vib.o(i.MChair_VibFuncReset_Seat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MChair_VibFuncReset_Seat
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SetSeatVibWorkState
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SeatVibResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_VibMA
</UL>

<P><STRONG><a name="[1c2]"></a>MotorCountUpdata</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, motorcommon.o(i.MotorCountUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorCountUpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_CountIOCheck_CB
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_CountIOCheck_CB
</UL>

<P><STRONG><a name="[1ce]"></a>PAUSE_OFF</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, commonlib.o(i.PAUSE_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PAUSE_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_PauseHandle
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[1cd]"></a>PAUSE_ON</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, commonlib.o(i.PAUSE_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PAUSE_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_PauseHandle
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[146]"></a>Pump_ActionHandle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gas.o(i.Pump_ActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pump_ActionHandle &rArr; BSP_IO_SetOutput_PumpCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_PumpCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gas.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>RealTimeInspect_FaultCheck</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, realtimeinspect.o(i.RealTimeInspect_FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RealTimeInspect_FaultCheck &rArr; SysMode_Standby_Enter &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> realtimeinspect.o(.constdata)
</UL>
<P><STRONG><a name="[27b]"></a>RealTimeInspect_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, realtimeinspect.o(i.RealTimeInspect_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RealTimeInspect_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[149]"></a>Roller_AllPartsHandle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, roller.o(i.Roller_AllPartsHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Roller_AllPartsHandle &rArr; Roller_FeetRollerHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_FeetRollerHandle
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesRollerHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> roller.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>Roller_CDPDataObjRx_0x49</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, roller.o(i.Roller_CDPDataObjRx_0x49))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Roller_CDPDataObjRx_0x49
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>Roller_CDPDataObjTx_0x49</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, roller.o(i.Roller_CDPDataObjTx_0x49))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[24e]"></a>Roller_CalvesGasCtrl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, funcma_roller.o(i.Roller_CalvesGasCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Roller_CalvesGasCtrl &rArr; MChair_TabHandle_GasAuto &rArr; ActionObjHandle_Gas &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_GasAuto
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_RollerMA
</UL>

<P><STRONG><a name="[27d]"></a>Roller_CalvesRollerHandle</STRONG> (Thumb, 520 bytes, Stack size 8 bytes, roller.o(i.Roller_CalvesRollerHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Roller_CalvesRollerHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesRollerResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_AllPartsHandle
</UL>

<P><STRONG><a name="[58]"></a>Roller_CalvesRollerPauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, roller.o(i.Roller_CalvesRollerPauseOff))
<BR>[Address Reference Count : 2]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
<LI> funclogic.o(i.MChair_FuncExe)
</UL>
<P><STRONG><a name="[57]"></a>Roller_CalvesRollerPauseOn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, roller.o(i.Roller_CalvesRollerPauseOn))
<BR>[Address Reference Count : 2]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
<LI> funclogic.o(i.MChair_FuncExe)
</UL>
<P><STRONG><a name="[26a]"></a>Roller_CalvesRollerResetStep</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, roller.o(i.Roller_CalvesRollerResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Calves
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_CalvesRollerHandle
</UL>

<P><STRONG><a name="[23a]"></a>Roller_ClrFeetRollerKeepAtInitPosition</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, roller.o(i.Roller_ClrFeetRollerKeepAtInitPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[24c]"></a>Roller_FeetGasCtrl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, funcma_roller.o(i.Roller_FeetGasCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_RollerMA
</UL>

<P><STRONG><a name="[27c]"></a>Roller_FeetRollerHandle</STRONG> (Thumb, 898 bytes, Stack size 8 bytes, roller.o(i.Roller_FeetRollerHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Roller_FeetRollerHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_FeetRollerResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_AllPartsHandle
</UL>

<P><STRONG><a name="[78]"></a>Roller_FeetRollerPauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, roller.o(i.Roller_FeetRollerPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[68]"></a>Roller_FeetRollerPauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, roller.o(i.Roller_FeetRollerPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[26b]"></a>Roller_FeetRollerResetStep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, roller.o(i.Roller_FeetRollerResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Feet
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_FeetRollerHandle
</UL>

<P><STRONG><a name="[2bf]"></a>Roller_GetCSFlag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, roller.o(i.Roller_GetCSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Roller_GetCSFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[27e]"></a>Roller_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, roller.o(i.Roller_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Roller_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[27f]"></a>Roller_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, roller.o(i.Roller_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Roller_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[24f]"></a>Roller_SetCalvesRollerWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, roller.o(i.Roller_SetCalvesRollerWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Calves
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_RollerMA
</UL>

<P><STRONG><a name="[239]"></a>Roller_SetFeetRollerKeepAtInitPosition</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, roller.o(i.Roller_SetFeetRollerKeepAtInitPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[24d]"></a>Roller_SetFeetRollerWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, roller.o(i.Roller_SetFeetRollerWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_RollerFuncReset_Feet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_RollerMA
</UL>

<P><STRONG><a name="[127]"></a>SaveData_CDPDataObjRx_0x3D</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, savedata.o(i.SaveData_CDPDataObjRx_0x3D))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SaveData_CDPDataObjRx_0x3D
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>SaveData_CDPDataObjRx_0x3E</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, savedata.o(i.SaveData_CDPDataObjRx_0x3E))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SaveData_CDPDataObjRx_0x3E &rArr; SaveData_WriteIDCode &rArr; BSP_FEEP_Write &rArr; BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_WriteIDCode
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetIDCodeWriteCount
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetIDCode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>SaveData_GetBackSpikeMotorRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetBackSpikeMotorRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[28b]"></a>SaveData_GetFeetSpikeMotorRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetFeetSpikeMotorRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[1da]"></a>SaveData_GetIDCode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, savedata.o(i.SaveData_GetIDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveData_GetIDCode
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_CDPDataObjRx_0x3E
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0041
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x0040
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_GetIDCode
</UL>

<P><STRONG><a name="[280]"></a>SaveData_GetIDCodeWriteCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetIDCodeWriteCount))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_CDPDataObjRx_0x3E
</UL>

<P><STRONG><a name="[285]"></a>SaveData_GetSysRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetSysRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[289]"></a>SaveData_GetTCSMotorRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetTCSMotorRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[286]"></a>SaveData_GetXMotorRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetXMotorRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[287]"></a>SaveData_GetYMotorRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetYMotorRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[288]"></a>SaveData_GetZMotorRunTimeHour</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, savedata.o(i.SaveData_GetZMotorRunTimeHour))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjTx_0x004D
</UL>

<P><STRONG><a name="[282]"></a>SaveData_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, savedata.o(i.SaveData_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveData_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[283]"></a>SaveData_Load</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, savedata.o(i.SaveData_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SaveData_Load &rArr; SaveData_WriteIDCode &rArr; BSP_FEEP_Write &rArr; BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_WriteIDCode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[84]"></a>SaveData_Update</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, savedata.o(i.SaveData_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SaveData_Update &rArr; BSP_FEEP_Write &rArr; BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> savedata.o(.constdata)
</UL>
<P><STRONG><a name="[281]"></a>SaveData_WriteIDCode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, savedata.o(i.SaveData_WriteIDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SaveData_WriteIDCode &rArr; BSP_FEEP_Write &rArr; BSP_FLASH_ProgramWord &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_CDPDataObjRx_0x3E
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Load
</UL>

<P><STRONG><a name="[131]"></a>Server_CDPDataObjRX_0x0040</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, server.o(i.Server_CDPDataObjRX_0x0040))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_CDPDataObjRX_0x0040
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>Server_CDPDataObjRX_0x0042</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, server.o(i.Server_CDPDataObjRX_0x0042))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_CDPDataObjRX_0x0042
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>Server_CDPDataObjRX_0x0043</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, server.o(i.Server_CDPDataObjRX_0x0043))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_CDPDataObjRX_0x0043
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>Server_CDPDataObjRX_0x0702</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, server.o(i.Server_CDPDataObjRX_0x0702))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Server_CDPDataObjRX_0x0702 &rArr; MChair_KeyValHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_KeyValHandle
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>Server_CDPDataObjRX_0x0901</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, server.o(i.Server_CDPDataObjRX_0x0901))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_CDPDataObjRX_0x0901
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>Server_CDPDataObjRX_0x0912</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, server.o(i.Server_CDPDataObjRX_0x0912))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Server_CDPDataObjRX_0x0912
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_SetIntState
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>Server_CDPDataObjRX_0x0913</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, server.o(i.Server_CDPDataObjRX_0x0913))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Server_CDPDataObjRX_0x0913
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>Server_CDPDataObjRX_0x0C60</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, server.o(i.Server_CDPDataObjRX_0x0C60))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Server_CDPDataObjRX_0x0C60
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>Server_CDPDataObjRX_0x0D01</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, server.o(i.Server_CDPDataObjRX_0x0D01))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_CDPDataObjRX_0x0D01
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>Server_CDPDataObjRX_0x0D02</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, server.o(i.Server_CDPDataObjRX_0x0D02))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_CDPDataObjRX_0x0D02
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>Server_CDPDataObjTx_0x0040</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, server.o(i.Server_CDPDataObjTx_0x0040))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Server_CDPDataObjTx_0x0040 &rArr; SaveData_GetIDCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetIDCode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1fe]"></a>Server_CDPDataObjTx_0x0041</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, server.o(i.Server_CDPDataObjTx_0x0041))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Server_CDPDataObjTx_0x0041 &rArr; SaveData_GetIDCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetIDCode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1fc]"></a>Server_CDPDataObjTx_0x0042</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, server.o(i.Server_CDPDataObjTx_0x0042))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Server_CDPDataObjTx_0x0042
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1fd]"></a>Server_CDPDataObjTx_0x0043</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, server.o(i.Server_CDPDataObjTx_0x0043))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1ff]"></a>Server_CDPDataObjTx_0x004C</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, server.o(i.Server_CDPDataObjTx_0x004C))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[200]"></a>Server_CDPDataObjTx_0x004D</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, server.o(i.Server_CDPDataObjTx_0x004D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Server_CDPDataObjTx_0x004D
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetZMotorRunTimeHour
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetYMotorRunTimeHour
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetXMotorRunTimeHour
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetTCSMotorRunTimeHour
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetSysRunTimeHour
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetFeetSpikeMotorRunTimeHour
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_GetBackSpikeMotorRunTimeHour
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[203]"></a>Server_CDPDataObjTx_0x0912</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, server.o(i.Server_CDPDataObjTx_0x0912))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[202]"></a>Server_CDPDataObjTx_0x0D01</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, server.o(i.Server_CDPDataObjTx_0x0D01))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Server_CDPDataObjTx_0x0D01 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[201]"></a>Server_CDPDataObjTx_0x0D02</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, server.o(i.Server_CDPDataObjTx_0x0D02))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Server_CDPDataObjTx_0x0D02 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[1ec]"></a>Server_GetCSFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, server.o(i.Server_GetCSFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Server_GetCSFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDURxHandle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenStateTmrToApp_DataTx
</UL>

<P><STRONG><a name="[1d9]"></a>Server_ReReportedData</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, server.o(i.Server_ReReportedData))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_CfgNetwork
</UL>

<P><STRONG><a name="[1d8]"></a>Server_SetIntData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, server.o(i.Server_SetIntData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Server_SetIntData
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_CfgNetwork
</UL>

<P><STRONG><a name="[1d7]"></a>Server_SetIntState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, server.o(i.Server_SetIntState))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_CDPDataObjRX_0x0912
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_CfgNetwork
</UL>

<P><STRONG><a name="[20d]"></a>Server_SetKeyExeState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, server.o(i.Server_SetKeyExeState))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDURxHandle
</UL>

<P><STRONG><a name="[12f]"></a>SideCtrl_CDPDataObjRx_0x50</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, cdp.o(i.SideCtrl_CDPDataObjRx_0x50))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SideCtrl_CDPDataObjRx_0x50 &rArr; ESF_EvtQuene_Post &rArr; ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Post
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>SideCtrl_CDPDataObjTx_0x50</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, cdp.o(i.SideCtrl_CDPDataObjTx_0x50))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SideCtrl_CDPDataObjTx_0x50
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_DataTxTmrHandle
</UL>

<P><STRONG><a name="[2bb]"></a>Spike_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spike.o(i.Spike_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[28d]"></a>Spike_Handle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spike.o(i.Spike_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Spike_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_EnableInputInterrupt_ZeroSpikeCount
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_EnableInputInterrupt_FeetSpikeCount
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_EnableInputInterrupt_BackSpikeCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[291]"></a>Spike_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spike.o(i.Spike_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Spike_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5a]"></a>Spike_LegLenDetectPauseOff</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spike.o(i.Spike_LegLenDetectPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(i.MChair_FuncExe)
</UL>
<P><STRONG><a name="[59]"></a>Spike_LegLenDetectPauseOn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spike.o(i.Spike_LegLenDetectPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> funclogic.o(i.MChair_FuncExe)
</UL>
<P><STRONG><a name="[23c]"></a>Spike_LegLenDetectRedo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spike.o(i.Spike_LegLenDetectRedo))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExeAngleHandle
</UL>

<P><STRONG><a name="[14b]"></a>Spike_MoveActionHandle</STRONG> (Thumb, 1550 bytes, Stack size 56 bytes, spike.o(i.Spike_MoveActionHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Spike_MoveActionHandle &rArr; LegFlexSpike_GetCSFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_GetCSFlag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_GetCSFlag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetCSFlag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetCSFlag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_GetPosition
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_GetPosition
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_SetULegPosition
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_SetPosition
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_SetPosition
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_SetPosition
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_SetPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>Spike_ResetHandle</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, spike.o(i.Spike_ResetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spike_ResetHandle &rArr; BSP_IO_4959_FeetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_4959_FeetReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_4959_BackReset
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ReadInput_FeetMotoFault
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ReadInput_BackMotoFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spike.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>Spike_SetAngle</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, spike.o(i.Spike_SetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetAngle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackAngle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetZeroAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_SetFuncAutoSpike
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Enter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_TestSpike_Timer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeAuto
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CoreGasSpikeAuto
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeMannual
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExeAngleHandle
</UL>

<P><STRONG><a name="[17b]"></a>Spike_SetBackAngle</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, spike.o(i.Spike_SetBackAngle))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
</UL>

<P><STRONG><a name="[252]"></a>Spike_SetBackMove</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, spike.o(i.Spike_SetBackMove))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetMoveAction
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeMannual
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeMannual
</UL>

<P><STRONG><a name="[17d]"></a>Spike_SetFeetAngle</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, spike.o(i.Spike_SetFeetAngle))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Timer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
</UL>

<P><STRONG><a name="[253]"></a>Spike_SetFeetMove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spike.o(i.Spike_SetFeetMove))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetMoveAction
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeMannual
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeMannual
</UL>

<P><STRONG><a name="[265]"></a>Spike_SetLegFlexAngle</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, spike.o(i.Spike_SetLegFlexAngle))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Timer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
</UL>

<P><STRONG><a name="[181]"></a>Spike_SetLegFlexMove</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, spike.o(i.Spike_SetLegFlexMove))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Timer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetMoveAction
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeMannual
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeMannual
</UL>

<P><STRONG><a name="[1d1]"></a>Spike_SetLegLenDetectExtendMax</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spike.o(i.Spike_SetLegLenDetectExtendMax))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Handle
</UL>

<P><STRONG><a name="[237]"></a>Spike_SetLegLenDetectSw</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spike.o(i.Spike_SetLegLenDetectSw))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe
</UL>

<P><STRONG><a name="[257]"></a>Spike_SetMoveAction</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spike.o(i.Spike_SetMoveAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spike_SetMoveAction
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexMove
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexMove
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetMove
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackMove
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetZeroMove
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
</UL>

<P><STRONG><a name="[266]"></a>Spike_SetULegFlexAngle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spike.o(i.Spike_SetULegFlexAngle))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Timer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Packing_Handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_CloseForNewFunc
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabHandle_ResetMixOtherTabStep
</UL>

<P><STRONG><a name="[182]"></a>Spike_SetULegFlexMove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spike.o(i.Spike_SetULegFlexMove))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetMoveAction
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncSwitch_SpikeMannual
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeMannual
</UL>

<P><STRONG><a name="[17c]"></a>Spike_SetZeroAngle</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, spike.o(i.Spike_SetZeroAngle))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
</UL>

<P><STRONG><a name="[29c]"></a>Spike_SetZeroMove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spike.o(i.Spike_SetZeroMove))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetMoveAction
</UL>

<P><STRONG><a name="[250]"></a>Spike_SetZeroSafetyAngleLimitRef</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spike.o(i.Spike_SetZeroSafetyAngleLimitRef))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_SpikeAuto
</UL>

<P><STRONG><a name="[af]"></a>StandBy_Key_NoKeyPress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_NoKeyPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_NoKeyPress
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetMoveAdjustRoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>StandBy_Key_Power</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StandBy_Key_Power &rArr; SysMode_UserRun_Enter &rArr; MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>StandBy_Key_SpikeBackDownFeetUp</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_SpikeBackDownFeetUp))
<BR>[Address Reference Count : 2]<UL><LI> sysmode_standby.o(.constdata)
<LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>StandBy_Key_SpikeBackUpFeetDown</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_SpikeBackUpFeetDown))
<BR>[Address Reference Count : 2]<UL><LI> sysmode_standby.o(.constdata)
<LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>StandBy_Key_SpikeFeetDown</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_SpikeFeetDown))
<BR>[Address Reference Count : 2]<UL><LI> sysmode_standby.o(.constdata)
<LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>StandBy_Key_SpikeFeetUp</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_SpikeFeetUp))
<BR>[Address Reference Count : 2]<UL><LI> sysmode_standby.o(.constdata)
<LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>StandBy_Key_SpikeHomeReset</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_SpikeHomeReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StandBy_Key_SpikeHomeReset &rArr; MChair_SetFuncAutoSpike &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_SetFuncAutoSpike
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>StandBy_Key_SpikeLegExtend</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_SpikeLegExtend))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>StandBy_Key_SpikeLegShorten</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_SpikeLegShorten))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>StandBy_Key_SpikeZeroGravity</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_SpikeZeroGravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StandBy_Key_SpikeZeroGravity &rArr; MChair_SetFuncAutoSpike &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_SetFuncAutoSpike
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>StandBy_Key_SpikeZeroGravity1</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_SpikeZeroGravity1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StandBy_Key_SpikeZeroGravity1 &rArr; MChair_SetFuncAutoSpike &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_SetFuncAutoSpike
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sysmode_standby.o(.constdata)
<LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>StandBy_Key_SpikeZeroGravity2</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_SpikeZeroGravity2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StandBy_Key_SpikeZeroGravity2 &rArr; MChair_SetFuncAutoSpike &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_SetFuncAutoSpike
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>Standby_KeyValAdditonOp</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, sysmode_standby.o(i.Standby_KeyValAdditonOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Standby_KeyValAdditonOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(i.SysMode_Standby_Handle)
</UL>
<P><STRONG><a name="[2ad]"></a>SysMode_DefaultKeyValHandle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sysmode.o(i.SysMode_DefaultKeyValHandle))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_TestSpike_Handle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Handle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Handle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Handle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Handle
</UL>

<P><STRONG><a name="[9d]"></a>SysMode_ERPPowerHandle</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysmode.o(i.SysMode_ERPPowerHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMode_ERPPowerHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_ERPPowerSw
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERPPower_OnHandle
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERPPower_OffHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>SysMode_Handle</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, sysmode.o(i.SysMode_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysMode_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2a2]"></a>SysMode_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sysmode.o(i.SysMode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysMode_Init &rArr; SysMode_Standby_Enter &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_TestSpike_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther2_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectOther1_Init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectManual_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a9]"></a>SysMode_InspectAuto_Handle</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysmode_venderinspectauto.o(i.SysMode_InspectAuto_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMode_InspectAuto_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_SetCountFaultCheckSw
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_SetCountFaultCheckSw
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_SetCountFaultCheckSw
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_DefaultKeyValHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>SysMode_InspectAuto_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysmode_venderinspectauto.o(i.SysMode_InspectAuto_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[9f]"></a>SysMode_InspectAuto_Timer</STRONG> (Thumb, 970 bytes, Stack size 24 bytes, sysmode_venderinspectauto.o(i.SysMode_InspectAuto_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysMode_InspectAuto_Timer &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_GetVenderTestPin
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_GetCSFlag
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZPosition
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetYPosition
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSAction
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZPosition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexMove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetAngle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackAngle
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetFeetRollerWorkState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetCalvesRollerWorkState
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetProjectionWorkState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetLogoWorkState
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetLumbarBackHeatWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>SysMode_InspectManual_Handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysmode_venderinspectmannual.o(i.SysMode_InspectManual_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMode_InspectManual_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_DefaultKeyValHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a6]"></a>SysMode_InspectManual_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysmode_venderinspectmannual.o(i.SysMode_InspectManual_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[a0]"></a>SysMode_InspectManual_Timer</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, sysmode_venderinspectmannual.o(i.SysMode_InspectManual_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysMode_InspectManual_Timer &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSAction
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetFeetRollerWorkState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetCalvesRollerWorkState
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetProjectionWorkState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetLogoWorkState
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetLumbarBackHeatWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>SysMode_InspectOther1_Handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysmode_venderinspectother1.o(i.SysMode_InspectOther1_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMode_InspectOther1_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_DefaultKeyValHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a8]"></a>SysMode_InspectOther1_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysmode_venderinspectother1.o(i.SysMode_InspectOther1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[a2]"></a>SysMode_InspectOther1_Timer</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, sysmode_venderinspectother1.o(i.SysMode_InspectOther1_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysMode_InspectOther1_Timer &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZPosition
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetYPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSAction
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZPosition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetFeetHeatWorkState
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZAction
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetAction
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetAngle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackAngle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetLumbarBackHeatWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>SysMode_InspectOther2_Handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysmode_venderinspectother2.o(i.SysMode_InspectOther2_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMode_InspectOther2_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_DefaultKeyValHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>SysMode_InspectOther2_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysmode_venderinspectother2.o(i.SysMode_InspectOther2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[a3]"></a>SysMode_InspectOther2_Timer</STRONG> (Thumb, 796 bytes, Stack size 8 bytes, sysmode_venderinspectother2.o(i.SysMode_InspectOther2_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysMode_InspectOther2_Timer &rArr; Gas_SetGasPart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetPumpSw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPartCtrlEnOnly
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_SetGasPart
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZPosition
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetYPosition
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetTCSAction
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZPosition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetFeetAngle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetBackAngle
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetFeetRollerWorkState
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_SetCalvesRollerWorkState
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetProjectionWorkState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_SetLogoWorkState
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_SetLumbarBackHeatWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>SysMode_OnOffKeyCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sysmode.o(i.SysMode_OnOffKeyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysMode_OnOffKeyCheck &rArr; SysMode_UserRun_Enter &rArr; MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ReadInput_PowerKeyState
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_UserRun_Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>SysMode_Packing_Handle</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, sysmode_venderpacking.o(i.SysMode_Packing_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysMode_Packing_Handle &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZPosition
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXPosition
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexAngle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexAngle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetPosition
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetPosition
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_GetPosition
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetXYZPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>SysMode_PauseHandle</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, sysmode.o(i.SysMode_PauseHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysMode_PauseHandle &rArr; PAUSE_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAUSE_ON
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAUSE_OFF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>SysMode_StandBy_EngiModeSelcetTLHandle</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sysmode_standby.o(i.SysMode_StandBy_EngiModeSelcetTLHandle))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>SysMode_Standby_Enter</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sysmode_standby.o(i.SysMode_Standby_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysMode_Standby_Enter &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexAngle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexAngle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Key_Power
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTimeInspect_FaultCheck
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_Power
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_OnOffKeyCheck
</UL>

<P><STRONG><a name="[a7]"></a>SysMode_Standby_Handle</STRONG> (Thumb, 554 bytes, Stack size 8 bytes, sysmode_standby.o(i.SysMode_Standby_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysMode_Standby_Handle &rArr; MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_SetCountFaultCheckSw
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_SetCountFaultCheckSw
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_ShoulderAdjustRe
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZMBackProtectDisableSw
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_SetCountFaultCheckSw
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a3]"></a>SysMode_Standby_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysmode_standby.o(i.SysMode_Standby_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[ab]"></a>SysMode_TestSpike_Handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysmode_vendertestspike.o(i.SysMode_TestSpike_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMode_TestSpike_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_DefaultKeyValHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a7]"></a>SysMode_TestSpike_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysmode_vendertestspike.o(i.SysMode_TestSpike_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[a1]"></a>SysMode_TestSpike_Timer</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sysmode_vendertestspike.o(i.SysMode_TestSpike_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysMode_TestSpike_Timer &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[272]"></a>SysMode_UserRun_Enter</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, sysmode_userrun.o(i.SysMode_UserRun_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysMode_UserRun_Enter &rArr; MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYPosition
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_Power
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_OnOffKeyCheck
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_TabTry_CDPDataObjRx_0x1A_To_0x1F
</UL>

<P><STRONG><a name="[a8]"></a>SysMode_UserRun_Handle</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, sysmode_userrun.o(i.SysMode_UserRun_Handle))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[2a4]"></a>SysMode_UserRun_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysmode_userrun.o(i.SysMode_UserRun_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
</UL>

<P><STRONG><a name="[9e]"></a>SysMode_UserRun_Timer</STRONG> (Thumb, 762 bytes, Stack size 8 bytes, sysmode_userrun.o(i.SysMode_UserRun_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysMode_UserRun_Timer &rArr; MChair_FuncLogic_ClearAllFunc &rArr; Core_SetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetULegFlexAngle
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetLegFlexAngle
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_SetAngle
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncLogic_ClearAllFunc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetZMBackProtectDisableSw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_systicker.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[2b1]"></a>System_EvtHandle</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, system.o(i.System_EvtHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = System_EvtHandle &rArr; ESF_MemBuf_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_MemBuf_Free
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_EvtQuene_Pend
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[82]"></a>System_EvtHandle_CDPRx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system.o(i.System_EvtHandle_CDPRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = System_EvtHandle_CDPRx &rArr; CDP_PDURxHandle &rArr; CDP_DataObjRxHandle &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_PDURxHandle
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_EvtHandle_CDPCtrlRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.constdata)
</UL>
<P><STRONG><a name="[2b2]"></a>System_Handle</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, system.o(i.System_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = System_Handle &rArr; Vib_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_GetCSFlag
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_Handle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_GetCSFlag
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Handle
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Handle
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_GetCSFlag
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Handle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_Handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_GetCSFlag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegFlexSpike_GetCSFlag
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_GetCSFlag
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Handle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_GetCSFlag
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_Handle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_GetGasPart2
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_GetGasPart1
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_GetCSFlag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_GetCSFlag
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_Handle
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetZMotorState
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetYMotorState
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetXMotorState
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetTCSMotorState
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetCSFlag
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetActionRunFlag
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Handle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_GetCSFlag
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CenXxx_GetCSFlag
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_GetCSFlag
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_GetCSFlag
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_EvtHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c5]"></a>System_Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, system.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = System_Init &rArr; BSP_Init &rArr; BSP_UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveData_Load
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roller_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RealTimeInspect_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BodyScan_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, bsp_gpio.o(i.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_uart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART0_IRQHandler &rArr; USART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; USART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; USART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>UserRun_KeyValAdditonOp</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, sysmode_userrun.o(i.UserRun_KeyValAdditonOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UserRun_KeyValAdditonOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(i.SysMode_UserRun_Handle)
</UL>
<P><STRONG><a name="[14a]"></a>Vib_AllPartsHandle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vib.o(i.Vib_AllPartsHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vib_AllPartsHandle &rArr; Vib_FeetVibHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_SeatVibHandle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_LumbarBackVibHandle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_FeetVibHandle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_CalvesVibHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vib.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>Vib_CDPDataObjRx_0x4A</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vib.o(i.Vib_CDPDataObjRx_0x4A))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vib_CDPDataObjRx_0x4A
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(.constdata)
</UL>
<P><STRONG><a name="[2d6]"></a>Vib_CalvesVibHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_CalvesVibHandle))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_AllPartsHandle
</UL>

<P><STRONG><a name="[75]"></a>Vib_CalvesVibPauseOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_CalvesVibPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[65]"></a>Vib_CalvesVibPauseOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_CalvesVibPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[275]"></a>Vib_CalvesVibResetStep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_CalvesVibResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Calves
</UL>

<P><STRONG><a name="[2d5]"></a>Vib_FeetVibHandle</STRONG> (Thumb, 324 bytes, Stack size 4 bytes, vib.o(i.Vib_FeetVibHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Vib_FeetVibHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_FeetVibResetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_AllPartsHandle
</UL>

<P><STRONG><a name="[74]"></a>Vib_FeetVibPauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, vib.o(i.Vib_FeetVibPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[64]"></a>Vib_FeetVibPauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, vib.o(i.Vib_FeetVibPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[276]"></a>Vib_FeetVibResetStep</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vib.o(i.Vib_FeetVibResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Feet
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_FeetVibHandle
</UL>

<P><STRONG><a name="[2c0]"></a>Vib_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vib.o(i.Vib_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2b3]"></a>Vib_Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vib.o(i.Vib_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Vib_Handle &rArr; ESF_TmrExeFuncScheduling &rArr; Log_OutPut &rArr; BSP_UART_TxData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncScheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>

<P><STRONG><a name="[2c6]"></a>Vib_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vib.o(i.Vib_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Vib_Init &rArr; ESF_TmrExeFuncTabCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESF_TmrExeFuncTabCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2d8]"></a>Vib_LumbarBackVibHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_LumbarBackVibHandle))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_AllPartsHandle
</UL>

<P><STRONG><a name="[77]"></a>Vib_LumbarBackVibPauseOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_LumbarBackVibPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[67]"></a>Vib_LumbarBackVibPauseOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_LumbarBackVibPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[278]"></a>Vib_LumbarBackVibResetStep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_LumbarBackVibResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_LumbarBack
</UL>

<P><STRONG><a name="[2d7]"></a>Vib_SeatVibHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SeatVibHandle))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_AllPartsHandle
</UL>

<P><STRONG><a name="[76]"></a>Vib_SeatVibPauseOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SeatVibPauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[66]"></a>Vib_SeatVibPauseOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SeatVibPauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[27a]"></a>Vib_SeatVibResetStep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SeatVibResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Seat
</UL>

<P><STRONG><a name="[274]"></a>Vib_SetCalvesVibWorkState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SetCalvesVibWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Calves
</UL>

<P><STRONG><a name="[254]"></a>Vib_SetFeetVibWorkState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vib.o(i.Vib_SetFeetVibWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Feet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_FuncExe_VibMA
</UL>

<P><STRONG><a name="[277]"></a>Vib_SetLumbarBackVibWorkState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SetLumbarBackVibWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_LumbarBack
</UL>

<P><STRONG><a name="[279]"></a>Vib_SetSeatVibWorkState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vib.o(i.Vib_SetSeatVibWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_VibFuncReset_Seat
</UL>

<P><STRONG><a name="[299]"></a>ZeroSpike_GetCSFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_GetCSFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[17f]"></a>ZeroSpike_GetPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_GetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionObjHandle_SpikeAuto
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[292]"></a>ZeroSpike_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zerospike.o(i.ZeroSpike_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZeroSpike_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_ResetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_Init
</UL>

<P><STRONG><a name="[70]"></a>ZeroSpike_PauseOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[60]"></a>ZeroSpike_PauseOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_PauseHandle)
</UL>
<P><STRONG><a name="[2d9]"></a>ZeroSpike_ResetPosition</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_ResetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSpike_Init
</UL>

<P><STRONG><a name="[2ac]"></a>ZeroSpike_SetCountFaultCheckSw</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_SetCountFaultCheckSw))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Handle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_InspectAuto_Handle
</UL>

<P><STRONG><a name="[294]"></a>ZeroSpike_SetPosition</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, zerospike.o(i.ZeroSpike_SetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spike_MoveActionHandle
</UL>

<P><STRONG><a name="[2f0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2f1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2f2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16d]"></a>adc_inserted_data_read</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_inserted_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>adc_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>drv_gpio_remap_TIMER3_PD12_13_14_15</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_gpio.o(i.drv_gpio_remap_TIMER3_PD12_13_14_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_gpio_remap_TIMER3_PD12_13_14_15 &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[196]"></a>drv_gpio_remap_USART0_TX_PA9_RX_PA10</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_gpio.o(i.drv_gpio_remap_USART0_TX_PA9_RX_PA10))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_gpio_remap_USART0_TX_PA9_RX_PA10 &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[197]"></a>drv_gpio_remap_USART1_TX_PD5_RX_PD6</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_gpio.o(i.drv_gpio_remap_USART1_TX_PD5_RX_PD6))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_gpio_remap_USART1_TX_PD5_RX_PD6 &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[198]"></a>drv_gpio_remap_USART2_TX_PB10_RX_PB11</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.drv_gpio_remap_USART2_TX_PB10_RX_PB11))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_gpio_remap_USART2_TX_PB10_RX_PB11 &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[21e]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2db]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[2dc]"></a>fmc_bank0_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank0_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[2dd]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[2de]"></a>fmc_bank1_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank1_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[18c]"></a>fmc_flag_clear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>

<P><STRONG><a name="[18e]"></a>fmc_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>

<P><STRONG><a name="[18d]"></a>fmc_page_erase</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, gd32f30x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>

<P><STRONG><a name="[18b]"></a>fmc_unlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>

<P><STRONG><a name="[18f]"></a>fmc_word_program</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gd32f30x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
</UL>

<P><STRONG><a name="[16b]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_4959_FeetReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_4959_BackReset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_PumpCtrl
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_FeetSpikeCtrl
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_BackSpikeCtrl
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_DVR8804_Ouput
</UL>

<P><STRONG><a name="[19a]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[19d]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ReadInput_PowerKeyState
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ReadInput_FeetMotoFault
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_ReadInput_BackMotoFault
</UL>

<P><STRONG><a name="[2da]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_USART2_TX_PB10_RX_PB11
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_USART1_TX_PD5_RX_PD6
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_USART0_TX_PA9_RX_PA10
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gpio_remap_TIMER3_PD12_13_14_15
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = main &rArr; System_Init &rArr; BSP_Init &rArr; BSP_UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ab]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>

<P><STRONG><a name="[1b1]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2b0]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e1]"></a>rcu_clock_freq_get</STRONG> (Thumb, 310 bytes, Stack size 84 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[195]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>

<P><STRONG><a name="[2e0]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[2df]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[1ba]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
</UL>

<P><STRONG><a name="[1b5]"></a>timer_channel_output_config</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
</UL>

<P><STRONG><a name="[1b7]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
</UL>

<P><STRONG><a name="[1b6]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_SetFeetSpikeDuty
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_SetBackSpikeDuty
</UL>

<P><STRONG><a name="[1b8]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
</UL>

<P><STRONG><a name="[1ac]"></a>timer_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>

<P><STRONG><a name="[1af]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>

<P><STRONG><a name="[1ad]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>

<P><STRONG><a name="[1ae]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_TimerTrigReadInputInit
</UL>

<P><STRONG><a name="[2c8]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
</UL>

<P><STRONG><a name="[2c7]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMTmr_Init
</UL>

<P><STRONG><a name="[1bc]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f30x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[2cb]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>

<P><STRONG><a name="[2cc]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[1bf]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[2cd]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxData
</UL>

<P><STRONG><a name="[2ca]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[1be]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2c9]"></a>USART_IRQHandler</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, bsp_uart.o(i.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_gpio.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_DVR8804_Ouput
</UL>

<P><STRONG><a name="[18a]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_flash.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_ProgramWord
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_Erase
</UL>

<P><STRONG><a name="[186]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_feep.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FEEP_Write
</UL>

<P><STRONG><a name="[5c]"></a>Default_GetKeyValID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysmode.o(i.Default_GetKeyValID))
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(i.SysMode_DefaultKeyValHandle)
</UL>
<P><STRONG><a name="[9b]"></a>Default_Key_Power</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode.o(i.Default_Key_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Default_Key_Power &rArr; SysMode_Standby_Enter &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode.o(.constdata)
</UL>
<P><STRONG><a name="[29d]"></a>StandBy_EnterSysModeVender</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_EnterSysModeVender))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_TestSpike
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_TestOther1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_TestNoTimer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_TestAge
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_PackingAngle
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_InspectManual
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_Key_InspectAuto
</UL>

<P><STRONG><a name="[7e]"></a>StandBy_GetKeyValID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_GetKeyValID))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(i.SysMode_Standby_Handle)
</UL>
<P><STRONG><a name="[bf]"></a>StandBy_Key_EngiModeSelect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_EngiModeSelect))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>StandBy_Key_InspectAuto</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_InspectAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_InspectAuto
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>StandBy_Key_InspectManual</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_InspectManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_InspectManual
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>StandBy_Key_PackingAngle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_PackingAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_PackingAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>StandBy_Key_Pause</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sysmode_standby.o(i.StandBy_Key_Pause))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>StandBy_Key_TestAge</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_TestAge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_TestAge
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>StandBy_Key_TestNoTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_TestNoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_TestNoTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>StandBy_Key_TestOther1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_TestOther1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_TestOther1
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>StandBy_Key_TestSpike</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_standby.o(i.StandBy_Key_TestSpike))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StandBy_Key_TestSpike
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandBy_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_standby.o(.constdata)
</UL>
<P><STRONG><a name="[2d3]"></a>UserRun_EnterSysModeVender</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_EnterSysModeVender))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_TestSpike
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_TestNoTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_TestAge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_PackingAngle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_InspectOther2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_InspectOther1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_InspectManual
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_Key_InspectAuto
</UL>

<P><STRONG><a name="[80]"></a>UserRun_GetKeyValID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_GetKeyValID))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(i.SysMode_UserRun_Handle)
</UL>
<P><STRONG><a name="[fe]"></a>UserRun_Key_AutoGridCombo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoGridCombo))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>UserRun_Key_AutoLady</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoLady))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>UserRun_Key_AutoLumbarButtockPress</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoLumbarButtockPress))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>UserRun_Key_AutoLumbarButtockRecovery</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoLumbarButtockRecovery))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>UserRun_Key_AutoLumbarButtockRelax</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoLumbarButtockRelax))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>UserRun_Key_AutoLumbarKidneyCare</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoLumbarKidneyCare))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>UserRun_Key_AutoMan</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoMan))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>UserRun_Key_AutoMoveSleep</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoMoveSleep))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>UserRun_Key_AutoQuick</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoQuick))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>UserRun_Key_AutoRelax</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoRelax))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>UserRun_Key_AutoScraping</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoScraping))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>UserRun_Key_AutoShiatsu</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoShiatsu))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>UserRun_Key_AutoShoulderRecovery</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoShoulderRecovery))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>UserRun_Key_AutoShoulderRelax</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoShoulderRelax))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>UserRun_Key_AutoShoulderShiatsu</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoShoulderShiatsu))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>UserRun_Key_AutoShoulderTuina</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoShoulderTuina))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>UserRun_Key_AutoStretch</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_AutoStretch))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>UserRun_Key_BluetoothSwitch</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_BluetoothSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_BluetoothSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_SetOutput_BluetoothSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>UserRun_Key_BodyCheckOk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_BodyCheckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_BodyCheckOk
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetShoulderAdjustOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>UserRun_Key_CoreClap</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreClap))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>UserRun_Key_CoreFlexLevel</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreFlexLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreFlexLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualFlexLevelMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>UserRun_Key_CoreKnead</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreKnead))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>UserRun_Key_CoreMannualBack</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreMannualBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreMannualBack
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualFlexLevelMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>UserRun_Key_CoreMannualDown</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreMannualDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreMannualDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetMoveAdjustRoll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetShoulderAdjustOp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetMoveAdjustRoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>UserRun_Key_CoreMannualFront</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreMannualFront))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreMannualFront
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualFlexLevelMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>UserRun_Key_CoreMannualUp</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreMannualUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreMannualUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetMoveAdjustRoll
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetShoulderAdjustOp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetMoveAdjustRoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>UserRun_Key_CorePart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CorePart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CorePart
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetRollRange
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetRollRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>UserRun_Key_CoreRoll</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreRoll))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>UserRun_Key_CoreShiatsu</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreShiatsu))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>UserRun_Key_CoreSpot</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreSpot
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetRollRange
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_GetRollRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>UserRun_Key_CoreTCSSpeed</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreTCSSpeed))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>UserRun_Key_CoreTCSSpeedAdd</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreTCSSpeedAdd))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>UserRun_Key_CoreTCSSpeedDec</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreTCSSpeedDec))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>UserRun_Key_CoreTap</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreTap))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>UserRun_Key_CoreWidth</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualWidthMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>UserRun_Key_CoreWidthAdd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreWidthAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreWidthAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualWidthMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>UserRun_Key_CoreWidthDec</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreWidthDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreWidthDec
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualWidthMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>UserRun_Key_CoreXYZAction</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreXYZAction))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>UserRun_Key_CoreXYZSpeed</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreXYZSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreXYZSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualXYZSpeedMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>UserRun_Key_CoreXYZSpeedAdd</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_CoreXYZSpeedAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_CoreXYZSpeedAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_GetFuncCoreMannualXYZSpeedMax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>UserRun_Key_CoreXYZSpeedDec</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_CoreXYZSpeedDec))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>UserRun_Key_GasArms</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasArms))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>UserRun_Key_GasCalves</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasCalves))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>UserRun_Key_GasFullGas</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasFullGas))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>UserRun_Key_GasIntensity</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasIntensity))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>UserRun_Key_GasIntensityAdd</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasIntensityAdd))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>UserRun_Key_GasIntensityDec</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasIntensityDec))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>UserRun_Key_GasLumbarSeat</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasLumbarSeat))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>UserRun_Key_GasPartSelcet</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasPartSelcet))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>UserRun_Key_GasQuickGas</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasQuickGas))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>UserRun_Key_GasShoulder</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_GasShoulder))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>UserRun_Key_HeatLumbarBack</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_HeatLumbarBack))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>UserRun_Key_InspectAuto</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_InspectAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_InspectAuto
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>UserRun_Key_InspectManual</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_InspectManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_InspectManual
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>UserRun_Key_InspectOther1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_InspectOther1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_InspectOther1
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>UserRun_Key_InspectOther2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_InspectOther2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_InspectOther2
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>UserRun_Key_NoKeyPress</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_NoKeyPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_NoKeyPress
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_BackScanSetShoulderAdjustOp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_SetMoveAdjustRoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>UserRun_Key_PackingAngle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_PackingAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_PackingAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>UserRun_Key_Pause</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_Pause))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>UserRun_Key_Power</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UserRun_Key_Power &rArr; SysMode_Standby_Enter &rArr; Spike_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMode_Standby_Enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>UserRun_Key_RollerCalves</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_RollerCalves))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>UserRun_Key_RollerFeet</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_RollerFeet))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>UserRun_Key_SleepLed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sysmode_userrun.o(i.UserRun_Key_SleepLed))
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>UserRun_Key_TestAge</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_TestAge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_TestAge
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>UserRun_Key_TestNoTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_TestNoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_TestNoTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>UserRun_Key_TestSpike</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_TestSpike))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_TestSpike
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRun_EnterSysModeVender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>UserRun_Key_Timer</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, sysmode_userrun.o(i.UserRun_Key_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserRun_Key_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MChair_CoreMannualVenderTest3DSwSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmode_userrun.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>CDPDataObjID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cdp.o(i.CDPDataObjID))
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(i.CDP_DataObjRxHandle)
</UL>
<P><STRONG><a name="[50]"></a>ServerCDPDataObjID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cdp.o(i.ServerCDPDataObjID))
<BR>[Address Reference Count : 1]<UL><LI> cdp.o(i.CDP_DataObjRxHandle)
</UL>
<P><STRONG><a name="[4f]"></a>CDP_CenXxx_ByteRx</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cdp_cenxxx.o(i.CDP_CenXxx_ByteRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_CenXxx_ByteRx &rArr; CDP_FrameRxHandle &rArr; CumulativeSum_Check &rArr; CumulativeSum_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameRxHandle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_CtrlToCen_AnalyzeCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenxxx.o(i.CDP_CenXxx_Init)
</UL>
<P><STRONG><a name="[4c]"></a>AppDataObjID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cdp_cenapp.o(i.AppDataObjID))
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenapp.o(i.CDP_AppToCen_AnalyzeApp)
</UL>
<P><STRONG><a name="[4d]"></a>CDP_CenApp_ByteRx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cdp_cenapp.o(i.CDP_CenApp_ByteRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDP_CenApp_ByteRx &rArr; CDP_AppToCen_AnalyzeApp &rArr; BinarySearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameRxHandle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_AppToCen_AnalyzeApp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp_cenapp.o(i.CDP_CenApp_Init)
</UL>
<P><STRONG><a name="[4e]"></a>CDP_CenServer_ByteRx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cdp_censerver.o(i.CDP_CenServer_ByteRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CDP_CenServer_ByteRx &rArr; CDP_FrameRxHandle &rArr; CumulativeSum_Check &rArr; CumulativeSum_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDP_FrameRxHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdp_censerver.o(i.CDP_CenServer_Init)
</UL>
<P><STRONG><a name="[53]"></a>Core_GetTCSActionID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, core.o(i.Core_GetTCSActionID))
<BR>[Address Reference Count : 1]<UL><LI> core.o(i.Core_TCSActionHandle)
</UL>
<P><STRONG><a name="[52]"></a>Core_GetXYZActionID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, core.o(i.Core_GetXYZActionID))
<BR>[Address Reference Count : 2]<UL><LI> core.o(i.Core_GetXYZMannualManageAttr)
<LI> core.o(i.Core_XYZActionHandle)
</UL>
<P><STRONG><a name="[49]"></a>BackSpike_CountIOCheck_CB</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, backspike.o(i.BackSpike_CountIOCheck_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BackSpike_CountIOCheck_CB &rArr; MotorCountUpdata
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCountUpdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> backspike.o(i.BackSpike_Init)
</UL>
<P><STRONG><a name="[1c7]"></a>BackSpike_SetAction</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, backspike.o(i.BackSpike_SetAction))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_PositionIOCheck
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSpike_PositionHandle
</UL>

<P><STRONG><a name="[54]"></a>FeetSpike_CountIOCheck_CB</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, feetspike.o(i.FeetSpike_CountIOCheck_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FeetSpike_CountIOCheck_CB &rArr; MotorCountUpdata
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCountUpdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> feetspike.o(i.FeetSpike_Init)
</UL>
<P><STRONG><a name="[222]"></a>FeetSpike_SetAction</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, feetspike.o(i.FeetSpike_SetAction))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_PositionIOCheck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeetSpike_PositionHandle
</UL>

<P><STRONG><a name="[163]"></a>VoiceKey_AutoLadyOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoLadyOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>VoiceKey_AutoManOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoManOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>VoiceKey_AutoMoveSleepOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoMoveSleepOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>VoiceKey_AutoQuickOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoQuickOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>VoiceKey_AutoRelaxOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoRelaxOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>VoiceKey_AutoScrapingOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoScrapingOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>VoiceKey_AutoShiatsuOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoShiatsuOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>VoiceKey_AutoStretchOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_AutoStretchOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>VoiceKey_Default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, server.o(i.VoiceKey_Default))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>VoiceKey_HeatLumbarBackOff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_HeatLumbarBackOff))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>VoiceKey_HeatLumbarBackOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, server.o(i.VoiceKey_HeatLumbarBackOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>VoiceKey_PauseOff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_PauseOff))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>VoiceKey_PauseOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_PauseOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>VoiceKey_PowerOff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_PowerOff))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>VoiceKey_PowerOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, server.o(i.VoiceKey_PowerOn))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>VoiceLogicID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, server.o(i.VoiceLogicID))
<BR>[Address Reference Count : 1]<UL><LI> server.o(i.Server_CDPDataObjRX_0x0702)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
