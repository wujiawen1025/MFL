/*
========================================================================================================================
**【文件描述】                                        【文件描述】                                        【文件描述】**
========================================================================================================================
**    文件名称：ESF_Mem.h 
**
**    功能描述:
**
**    项目名称：Easy SoftWare FrameWork (简单 软件框架)
**
**    平台信息：
**
**    作    者：Hzy
**
**    版    本：V1.0
**
**    其他说明:
**
**    修改记录: --------------------------------------------------------------
**              2015.08    
**              完成 V1.0 版本
**              --------------------------------------------------------------
**              2016.06 
**              升级到V1.1版本。主要是为了简化有关事件和内存分配释放的使用。
**              1、去掉事件内存池相关内容。 
**              2、修改 ESF_Evt_t结构体，增加变量AppendData[1]; 
**              3、修改 ESF_Cfg.h文件，使得配置功能更明了简便。
**
========================================================================================================================
========================================================================================================================
*/
#ifndef ESF_MEM_H
#define ESF_MEM_H


/*
========================================================================================================================
* 【文件包含】                                         【文件包含】                                          【文件包含】
========================================================================================================================
*/
#include "ESF.h"


/*
========================================================================================================================
*【全局宏定义】                                       【全局宏定义】                                       【全局宏定义】
========================================================================================================================
*/

/*
**
**            配置：ESF_Mem 
**                  内存块
**   注意：ESF_MEM_BOLCK_SIZE 的大小是以 ESF_MemUnit_t 为单位的。
**         ESF_MemUnit_t 的定义为以下三者之一：
**                    typedef uint8_t   ESF_MemUnit_t;
**                    typedef uint16_t  ESF_MemUnit_t;
**                    typedef uint32_t  ESF_MemUnit_t;
**         所以以字节为单位的大小为：ESF_MEM_BOLCK_SIZE * ESF_MemUnit_t。
**
**         之所以这样做，是因为单片机位数不一样，可能涉及到地址对其的问题，
**         所以不直接以字节为单位来定义大小。
**
*/
#ifndef ESF_CFG_MEM_BOLCK_NUM
#define  ESF_CFG_MEM_BOLCK_NUM                2                               /*内存块数量，注：最小值为2*/
#endif
#if (ESF_CFG_MEM_BOLCK_NUM < 2)
#undef ESF_CFG_MEM_BOLCK_NUM
#define  ESF_CFG_MEM_BOLCK_NUM                2                               /*内存块数量，注：最小值为2*/
#endif

#ifndef ESF_CFG_MEM_BOLCK_BYTE_SIZE
#define  ESF_CFG_MEM_BOLCK_BYTE_SIZE          32                              /*内存块大小，单位字节。*/ 
#endif

#define  ESF_MEM_BOLCK_BYTE_SIZE              ESF_CFG_MEM_BOLCK_BYTE_SIZE     /*内存块大小，单位字节。*/ 

#define  BUNIT                                sizeof(ESF_MemUnit_t)           /*字节单位大小*/
#define  ESF_MEM_BOLCK_NUM                    ESF_CFG_MEM_BOLCK_NUM           /*内存块数量*/
/*实际内存块大小 = 配置的字节大小 + 事件结构体的大小 */
#define  ESF_MEM_BOLCK_SIZE                  ((ESF_MEM_BOLCK_BYTE_SIZE+BUNIT-1)/BUNIT + (sizeof(ESF_Evt_t)+BUNIT-1)/BUNIT) 


/*
========================================================================================================================
*【全局数据类型定义】                              【全局数据类型定义】                              【全局数据类型定义】
========================================================================================================================
*/
/*
************************************************************************************************************************
* 类型定义 :  根据芯片位宽，定义内存块单位                                                                             
************************************************************************************************************************
*/
#if (CPU_BIT_WIDTH == 8)
typedef  uint8_t   ESF_MemUnit_t;
#elif (CPU_BIT_WIDTH == 16)
typedef uint16_t  ESF_MemUnit_t;
#elif (CPU_BIT_WIDTH == 32)
typedef  uint32_t  ESF_MemUnit_t;
#else
typedef  uint32_t  ESF_MemUnit_t;
#endif

/*
========================================================================================================================
*【对外声明】                                          【对外声明】                                          【对外声明】
========================================================================================================================
*/
void ESF_MemBuf_Init(void);
void* ESF_MemBuf_Get(void);
uint8_t ESF_MemBuf_Free(void *p);

#endif
